//2019年07月23日10:29:02
///////////////////////////////////////奇数轮的最优差分路径//////////////////////////////
///////////////////////////////////////奇数轮的最优差分路径//////////////////////////////
///////////////////////////////////////奇数轮的最优差分路径//////////////////////////////
///////////////////////////////////////奇数轮的最优差分路径//////////////////////////////
//2019年07月23日11:26:11
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:36 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 70 
Time: 5.00 seconds.  
Searching CHAM-128 Bn_w: 71 
Time: 110.00 seconds.  
Searching CHAM-128 Bn_w: 72 
++++++++++++++Real weight: 72 +++++++++++
++++++++++++++Real weight: 72 +++++++++++
Time: 469.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x10200000    0x08002000     0x00000000     0x40000000    -3 
02     0x08002000    0x00000000     0x40000000     0x20400000    -2 
03     0x00000000    0x40000000     0x20400000     0x10004000    -0 
04     0x40000000    0x20400000     0x10004000     0x00000080    -2 
05     0x20400000    0x10004000     0x00000080     0x00000040    -3 
06     0x10004000    0x00000080     0x00000040     0x40800000    -3 
07     0x00000080    0x00000040     0x40800000     0x20008000    -1 
08     0x00000040    0x40800000     0x20008000     0x00000000    -1 
09     0x40800000    0x20008000     0x00000000     0x00000001    -3 
10     0x20008000    0x00000000     0x00000001     0x81000000    -2 
11     0x00000000    0x00000001     0x81000000     0x40010000    -1 
12     0x00000001    0x81000000     0x40010000     0x00000200    -2 
13     0x81000000    0x40010000     0x00000200     0x00000100    -2 
14     0x40010000    0x00000200     0x00000100     0x02000001    -3 
15     0x00000200    0x00000100     0x02000001     0x80020000    -1 
16     0x00000100    0x02000001     0x80020000     0x00000000    -2 
17     0x02000001    0x80020000     0x00000000     0x00000004    -3 
18     0x80020000    0x00000000     0x00000004     0x04000002    -1 
19     0x00000000    0x00000004     0x04000002     0x00040001    -1 
20     0x00000004    0x04000002     0x00040001     0x00000800    -2 
21     0x04000002    0x00040001     0x00000800     0x00000400    -3 
22     0x00040001    0x00000800     0x00000400     0x08000004    -3 
23     0x00000800    0x00000400     0x08000004     0x00080002    -1 
24     0x00000400    0x08000004     0x00080002     0x00000000    -2 
25     0x08000004    0x00080002     0x00000000     0x00000010    -3 
26     0x00080002    0x00000000     0x00000010     0x10000008    -2 
27     0x00000000    0x00000010     0x10000008     0x00100004    -1 
28     0x00000010    0x10000008     0x00100004     0x00002000    -2 
29     0x10000008    0x00100004     0x00002000     0x00001000    -3 
30     0x00100004    0x00002000     0x00001000     0x20000010    -3 
31     0x00002000    0x00001000     0x20000010     0x00200008    -1 
32     0x00001000    0x20000010     0x00200008     0x00000000    -2 
33     0x20000010    0x00200008     0x00000000     0x00000040    -3 
34     0x00200008    0x00000000     0x00000040     0x40000020    -2 
35     0x00000000    0x00000040     0x40000020     0x00400010    -1 
36     0x00000040    0x40000020     0x00400010     0x00008000    -2 
37     0x40000020    0x00400010     0x00008000     0x00004000    -   
------------------ 
36 Round CHAM-128 Total Weight: -72 
Time cost: 469.34 seconds ==  7.82 minutes == 0.13 hours == 0.01 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 479.13 seconds ==  7.99 minutes == 0.13 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日11:57:50
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:37 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 72 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 73 
++++++++++++++Real weight: 73 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000020    0x00000010     0x10200000     0x08002000    -1 
02     0x00000010    0x10200000     0x08002000     0x00000000    -2 
03     0x10200000    0x08002000     0x00000000     0x40000000    -3 
04     0x08002000    0x00000000     0x40000000     0x20400000    -2
05     0x00000000    0x40000000     0x20400000     0x10004000    -0 
06     0x40000000    0x20400000     0x10004000     0x00000080    -2 
07     0x20400000    0x10004000     0x00000080     0x00000040    -3 
08     0x10004000    0x00000080     0x00000040     0x40800000    -3 
09     0x00000080    0x00000040     0x40800000     0x20008000    -1 
10     0x00000040    0x40800000     0x20008000     0x00000000    -1 
11     0x40800000    0x20008000     0x00000000     0x00000001    -3 
12     0x20008000    0x00000000     0x00000001     0x81000000    -2 
13     0x00000000    0x00000001     0x81000000     0x40010000    -1 
14     0x00000001    0x81000000     0x40010000     0x00000200    -2 
15     0x81000000    0x40010000     0x00000200     0x00000100    -2 
16     0x40010000    0x00000200     0x00000100     0x02000001    -3 
17     0x00000200    0x00000100     0x02000001     0x80020000    -1 
18     0x00000100    0x02000001     0x80020000     0x00000000    -2 
19     0x02000001    0x80020000     0x00000000     0x00000004    -3 
20     0x80020000    0x00000000     0x00000004     0x04000002    -1 
21     0x00000000    0x00000004     0x04000002     0x00040001    -1 
22     0x00000004    0x04000002     0x00040001     0x00000800    -2 
23     0x04000002    0x00040001     0x00000800     0x00000400    -3 
24     0x00040001    0x00000800     0x00000400     0x08000004    -3 
25     0x00000800    0x00000400     0x08000004     0x00080002    -1 
26     0x00000400    0x08000004     0x00080002     0x00000000    -2 
27     0x08000004    0x00080002     0x00000000     0x00000010    -3 
28     0x00080002    0x00000000     0x00000010     0x10000008    -2 
29     0x00000000    0x00000010     0x10000008     0x00100004    -1 
30     0x00000010    0x10000008     0x00100004     0x00002000    -2 
31     0x10000008    0x00100004     0x00002000     0x00001000    -3 
32     0x00100004    0x00002000     0x00001000     0x20000010    -3 
33     0x00002000    0x00001000     0x20000010     0x00200008    -1 
34     0x00001000    0x20000010     0x00200008     0x00000000    -2 
35     0x20000010    0x00200008     0x00000000     0x00000040    -3 
36     0x00200008    0x00000000     0x00000040     0x40000020    -2 
37     0x00000000    0x00000040     0x40000020     0x00400010    -1 
38     0x00000040    0x40000020     0x00400010     0x00008000    -   
------------------ 
37 Round CHAM-128 Total Weight: -73 
Time cost: 0.00 seconds ==  0.00 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 9.56 seconds ==  0.16 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日12:56:15
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:38 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 73 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 74 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 75 
++++++++++++++Real weight: 75 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000020    0x00000010     0x10200000     0x08002000    -1 
02     0x00000010    0x10200000     0x08002000     0x00000000    -2 
03     0x10200000    0x08002000     0x00000000     0x40000000    -3 
04     0x08002000    0x00000000     0x40000000     0x20400000    -2 
05     0x00000000    0x40000000     0x20400000     0x10004000    -0 
06     0x40000000    0x20400000     0x10004000     0x00000080    -2 
07     0x20400000    0x10004000     0x00000080     0x00000040    -3 
08     0x10004000    0x00000080     0x00000040     0x40800000    -3 
09     0x00000080    0x00000040     0x40800000     0x20008000    -1 
10     0x00000040    0x40800000     0x20008000     0x00000000    -1 
11     0x40800000    0x20008000     0x00000000     0x00000001    -3 
12     0x20008000    0x00000000     0x00000001     0x81000000    -2 
13     0x00000000    0x00000001     0x81000000     0x40010000    -1 
14     0x00000001    0x81000000     0x40010000     0x00000200    -2 
15     0x81000000    0x40010000     0x00000200     0x00000100    -2 
16     0x40010000    0x00000200     0x00000100     0x02000001    -3 
17     0x00000200    0x00000100     0x02000001     0x80020000    -1 
18     0x00000100    0x02000001     0x80020000     0x00000000    -2 
19     0x02000001    0x80020000     0x00000000     0x00000004    -3 
20     0x80020000    0x00000000     0x00000004     0x04000002    -1 
21     0x00000000    0x00000004     0x04000002     0x00040001    -1 
22     0x00000004    0x04000002     0x00040001     0x00000800    -2 
23     0x04000002    0x00040001     0x00000800     0x00000400    -3 
24     0x00040001    0x00000800     0x00000400     0x08000004    -3 
25     0x00000800    0x00000400     0x08000004     0x00080002    -1 
26     0x00000400    0x08000004     0x00080002     0x00000000    -2 
27     0x08000004    0x00080002     0x00000000     0x00000010    -3 
28     0x00080002    0x00000000     0x00000010     0x10000008    -2 
29     0x00000000    0x00000010     0x10000008     0x00100004    -1 
30     0x00000010    0x10000008     0x00100004     0x00002000    -2 
31     0x10000008    0x00100004     0x00002000     0x00001000    -3 
32     0x00100004    0x00002000     0x00001000     0x20000010    -3 
33     0x00002000    0x00001000     0x20000010     0x00200008    -1 
34     0x00001000    0x20000010     0x00200008     0x00000000    -2 
35     0x20000010    0x00200008     0x00000000     0x00000040    -3 
36     0x00200008    0x00000000     0x00000040     0x40000020    -2 
37     0x00000000    0x00000040     0x40000020     0x00400010    -1 
38     0x00000040    0x40000020     0x00400010     0x00008000    -2 
39     0x40000020    0x00400010     0x00008000     0x00004000    -   
------------------ 
38 Round CHAM-128 Total Weight: -75 
Time cost: 0.00 seconds ==  0.00 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 10.19 seconds ==  0.17 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日13:01:23
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:39 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 75 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 76 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 77 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 78 
++++++++++++++Real weight: 78 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000020    0x00000010     0x10200000     0x08002000    -1 
02     0x00000010    0x10200000     0x08002000     0x00000000    -2 
03     0x10200000    0x08002000     0x00000000     0x40000000    -3 
04     0x08002000    0x00000000     0x40000000     0x20400000    -2 
05     0x00000000    0x40000000     0x20400000     0x10004000    -0 
06     0x40000000    0x20400000     0x10004000     0x00000080    -2 
07     0x20400000    0x10004000     0x00000080     0x00000040    -3 
08     0x10004000    0x00000080     0x00000040     0x40800000    -3 
09     0x00000080    0x00000040     0x40800000     0x20008000    -1 
10     0x00000040    0x40800000     0x20008000     0x00000000    -1 
11     0x40800000    0x20008000     0x00000000     0x00000001    -3 
12     0x20008000    0x00000000     0x00000001     0x81000000    -2 
13     0x00000000    0x00000001     0x81000000     0x40010000    -1 
14     0x00000001    0x81000000     0x40010000     0x00000200    -2 
15     0x81000000    0x40010000     0x00000200     0x00000100    -2 
16     0x40010000    0x00000200     0x00000100     0x02000001    -3 
17     0x00000200    0x00000100     0x02000001     0x80020000    -1 
18     0x00000100    0x02000001     0x80020000     0x00000000    -2 
19     0x02000001    0x80020000     0x00000000     0x00000004    -3 
20     0x80020000    0x00000000     0x00000004     0x04000002    -1 
21     0x00000000    0x00000004     0x04000002     0x00040001    -1 
22     0x00000004    0x04000002     0x00040001     0x00000800    -2 
23     0x04000002    0x00040001     0x00000800     0x00000400    -3 
24     0x00040001    0x00000800     0x00000400     0x08000004    -3 
25     0x00000800    0x00000400     0x08000004     0x00080002    -1 
26     0x00000400    0x08000004     0x00080002     0x00000000    -2 
27     0x08000004    0x00080002     0x00000000     0x00000010    -3 
28     0x00080002    0x00000000     0x00000010     0x10000008    -2 
29     0x00000000    0x00000010     0x10000008     0x00100004    -1 
30     0x00000010    0x10000008     0x00100004     0x00002000    -2 
31     0x10000008    0x00100004     0x00002000     0x00001000    -3 
32     0x00100004    0x00002000     0x00001000     0x20000010    -3 
33     0x00002000    0x00001000     0x20000010     0x00200008    -1 
34     0x00001000    0x20000010     0x00200008     0x00000000    -2 
35     0x20000010    0x00200008     0x00000000     0x00000040    -3 
36     0x00200008    0x00000000     0x00000040     0x40000020    -2 
37     0x00000000    0x00000040     0x40000020     0x00400010    -1 
38     0x00000040    0x40000020     0x00400010     0x00008000    -2 
39     0x40000020    0x00400010     0x00008000     0x00004000    -3 
40     0x00400010    0x00008000     0x00004000     0x80000040    -   
------------------ 
39 Round CHAM-128 Total Weight: -78 
Time cost: 0.01 seconds ==  0.00 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 9.59 seconds ==  0.16 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日13:48:30
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:40 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 78 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 79 
Time: 4.00 seconds.  
Searching CHAM-128 Bn_w: 80 
++++++++++++++Real weight: 80 +++++++++++
Time: 60.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00002040    0x40001000     0x00800000     0x00400000    -2 
02     0x40001000    0x00800000     0x00400000     0x00004080    -2 
03     0x00800000    0x00400000     0x00004080     0x80002000    -1 
04     0x00400000    0x00004080     0x80002000     0x00000000    -2 
05     0x00004080    0x80002000     0x00000000     0x00010000    -3 
06     0x80002000    0x00000000     0x00010000     0x00008100    -1 
07     0x00000000    0x00010000     0x00008100     0x00004001    -1 
08     0x00010000    0x00008100     0x00004001     0x02000000    -2 
09     0x00008100    0x00004001     0x02000000     0x01000000    -3 
10     0x00004001    0x02000000     0x01000000     0x00010200    -3 
11     0x02000000    0x01000000     0x00010200     0x00008002    -1 
12     0x01000000    0x00010200     0x00008002     0x00000000    -2 
13     0x00010200    0x00008002     0x00000000     0x00040000    -3 
14     0x00008002    0x00000000     0x00040000     0x00020400    -2 
15     0x00000000    0x00040000     0x00020400     0x00010004    -1 
16     0x00040000    0x00020400     0x00010004     0x08000000    -2 
17     0x00020400    0x00010004     0x08000000     0x04000000    -3 
18     0x00010004    0x08000000     0x04000000     0x00040800    -3 
19     0x08000000    0x04000000     0x00040800     0x00020008    -1 
20     0x04000000    0x00040800     0x00020008     0x00000000    -2 
21     0x00040800    0x00020008     0x00000000     0x00100000    -3 
22     0x00020008    0x00000000     0x00100000     0x00081000    -2 
23     0x00000000    0x00100000     0x00081000     0x00040010    -1 
24     0x00100000    0x00081000     0x00040010     0x20000000    -2 
25     0x00081000    0x00040010     0x20000000     0x10000000    -3 
26     0x00040010    0x20000000     0x10000000     0x00102000    -3 
27     0x20000000    0x10000000     0x00102000     0x00080020    -1 
28     0x10000000    0x00102000     0x00080020     0x00000000    -2 
29     0x00102000    0x00080020     0x00000000     0x00400000    -3 
30     0x00080020    0x00000000     0x00400000     0x00204000    -2 
31     0x00000000    0x00400000     0x00204000     0x00100040    -1 
32     0x00400000    0x00204000     0x00100040     0x80000000    -2 
33     0x00204000    0x00100040     0x80000000     0x40000000    -3 
34     0x00100040    0x80000000     0x40000000     0x00408000    -3 
35     0x80000000    0x40000000     0x00408000     0x00200080    -0 
36     0x40000000    0x00408000     0x00200080     0x00000000    -2 
37     0x00408000    0x00200080     0x00000000     0x01000000    -3 
38     0x00200080    0x00000000     0x01000000     0x00810000    -2 
39     0x00000000    0x01000000     0x00810000     0x00400100    -1 
40     0x01000000    0x00810000     0x00400100     0x00000002    -1 
41     0x00810000    0x00400100     0x00000002     0x00000001    -   
------------------ 
40 Round CHAM-128 Total Weight: -80 
Time cost: 60.75 seconds ==  1.01 minutes == 0.02 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 70.25 seconds ==  1.17 minutes == 0.02 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日13:55:30
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:41 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 80 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 81 
Time: 4.00 seconds.  
Searching CHAM-128 Bn_w: 82 
Time: 73.00 seconds.  
Searching CHAM-128 Bn_w: 83 
++++++++++++++Real weight: 83 +++++++++++
Time: 149.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00002040    0x40001000     0x00800000     0x00400000    -2 
02     0x40001000    0x00800000     0x00400000     0x00004080    -2 
03     0x00800000    0x00400000     0x00004080     0x80002000    -1 
04     0x00400000    0x00004080     0x80002000     0x00000000    -2 
05     0x00004080    0x80002000     0x00000000     0x00010000    -3 
06     0x80002000    0x00000000     0x00010000     0x00008100    -1 
07     0x00000000    0x00010000     0x00008100     0x00004001    -1 
08     0x00010000    0x00008100     0x00004001     0x02000000    -2 
09     0x00008100    0x00004001     0x02000000     0x01000000    -3 
10     0x00004001    0x02000000     0x01000000     0x00010200    -3 
11     0x02000000    0x01000000     0x00010200     0x00008002    -1 
12     0x01000000    0x00010200     0x00008002     0x00000000    -2 
13     0x00010200    0x00008002     0x00000000     0x00040000    -3 
14     0x00008002    0x00000000     0x00040000     0x00020400    -2 
15     0x00000000    0x00040000     0x00020400     0x00010004    -1 
16     0x00040000    0x00020400     0x00010004     0x08000000    -2 
17     0x00020400    0x00010004     0x08000000     0x04000000    -3 
18     0x00010004    0x08000000     0x04000000     0x00040800    -3 
19     0x08000000    0x04000000     0x00040800     0x00020008    -1 
20     0x04000000    0x00040800     0x00020008     0x00000000    -2 
21     0x00040800    0x00020008     0x00000000     0x00100000    -3 
22     0x00020008    0x00000000     0x00100000     0x00081000    -2 
23     0x00000000    0x00100000     0x00081000     0x00040010    -1 
24     0x00100000    0x00081000     0x00040010     0x20000000    -2 
25     0x00081000    0x00040010     0x20000000     0x10000000    -3 
26     0x00040010    0x20000000     0x10000000     0x00102000    -3 
27     0x20000000    0x10000000     0x00102000     0x00080020    -1 
28     0x10000000    0x00102000     0x00080020     0x00000000    -2 
29     0x00102000    0x00080020     0x00000000     0x00400000    -3 
30     0x00080020    0x00000000     0x00400000     0x00204000    -2 
31     0x00000000    0x00400000     0x00204000     0x00100040    -1 
32     0x00400000    0x00204000     0x00100040     0x80000000    -2 
33     0x00204000    0x00100040     0x80000000     0x40000000    -3 
34     0x00100040    0x80000000     0x40000000     0x00408000    -3 
35     0x80000000    0x40000000     0x00408000     0x00200080    -0 
36     0x40000000    0x00408000     0x00200080     0x00000000    -2 
37     0x00408000    0x00200080     0x00000000     0x01000000    -3 
38     0x00200080    0x00000000     0x01000000     0x00810000    -2 
39     0x00000000    0x01000000     0x00810000     0x00400100    -1 
40     0x01000000    0x00810000     0x00400100     0x00000002    -1 
41     0x00810000    0x00400100     0x00000002     0x00000001    -3 
42     0x00400100    0x00000002     0x00000001     0x01020000    -   
------------------ 
41 Round CHAM-128 Total Weight: -83  //没有在23轮的min+1
Time cost: 149.92 seconds ==  2.50 minutes == 0.04 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 159.90 seconds ==  2.66 minutes == 0.04 hours. 
Auto-search END! 
|************************************************************************|
//2019年07月23日14:04:43
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:41 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 80 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 81 
++++++++++++++Real weight: 81 +++++++++++
Time: 2.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000000    0x40000000     0x20400000     0x10004000    -0 
02     0x40000000    0x20400000     0x10004000     0x00000080    -2 
03     0x20400000    0x10004000     0x00000080     0x00000040    -3 
04     0x10004000    0x00000080     0x00000040     0x40800000    -3 
05     0x00000080    0x00000040     0x40800000     0x20008000    -1 
06     0x00000040    0x40800000     0x20008000     0x00000000    -1 
07     0x40800000    0x20008000     0x00000000     0x00000001    -3 
08     0x20008000    0x00000000     0x00000001     0x81000000    -2 
09     0x00000000    0x00000001     0x81000000     0x40010000    -1 
10     0x00000001    0x81000000     0x40010000     0x00000200    -2 
11     0x81000000    0x40010000     0x00000200     0x00000100    -2 
12     0x40010000    0x00000200     0x00000100     0x02000001    -3 
13     0x00000200    0x00000100     0x02000001     0x80020000    -1 
14     0x00000100    0x02000001     0x80020000     0x00000000    -2 
15     0x02000001    0x80020000     0x00000000     0x00000004    -3 
16     0x80020000    0x00000000     0x00000004     0x04000002    -1 
17     0x00000000    0x00000004     0x04000002     0x00040001    -1 
18     0x00000004    0x04000002     0x00040001     0x00000800    -2 
19     0x04000002    0x00040001     0x00000800     0x00000400    -3 
20     0x00040001    0x00000800     0x00000400     0x08000004    -3 
21     0x00000800    0x00000400     0x08000004     0x00080002    -1 
22     0x00000400    0x08000004     0x00080002     0x00000000    -2 
23     0x08000004    0x00080002     0x00000000     0x00000010    -3 
24     0x00080002    0x00000000     0x00000010     0x10000008    -2 
25     0x00000000    0x00000010     0x10000008     0x00100004    -1 
26     0x00000010    0x10000008     0x00100004     0x00002000    -2 
27     0x10000008    0x00100004     0x00002000     0x00001000    -3 
28     0x00100004    0x00002000     0x00001000     0x20000010    -3 
29     0x00002000    0x00001000     0x20000010     0x00200008    -1 
30     0x00001000    0x20000010     0x00200008     0x00000000    -2 
31     0x20000010    0x00200008     0x00000000     0x00000040    -3 
32     0x00200008    0x00000000     0x00000040     0x40000020    -2 
33     0x00000000    0x00000040     0x40000020     0x00400010    -1 
34     0x00000040    0x40000020     0x00400010     0x00008000    -2 
35     0x40000020    0x00400010     0x00008000     0x00004000    -3 
36     0x00400010    0x00008000     0x00004000     0x80000040    -3 
37     0x00008000    0x00004000     0x80000040     0x00800020    -1 
38     0x00004000    0x80000040     0x00800020     0x00000000    -2 
39     0x80000040    0x00800020     0x00000000     0x00000100    -2 
40     0x00800020    0x00000000     0x00000100     0x00000081    -2 
41     0x00000000    0x00000100     0x00000081     0x01000040    -1 
42     0x00000100    0x00000081     0x01000040     0x00020000    -   
------------------ 
41 Round CHAM-128 Total Weight: -81 
Time cost: 2.61 seconds ==  0.04 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 12.34 seconds ==  0.21 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|



//2019年07月23日14:01:34
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:42 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 83 
Time: 3.00 seconds.  
Searching CHAM-128 Bn_w: 84 
Time: 60.00 seconds.  
Searching CHAM-128 Bn_w: 85 
++++++++++++++Real weight: 85 +++++++++++
Time: 218.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x10200000    0x08002000     0x00000000     0x40000000    -3 
02     0x08002000    0x00000000     0x40000000     0x20400000    -2 
03     0x00000000    0x40000000     0x20400000     0x10004000    -0 
04     0x40000000    0x20400000     0x10004000     0x00000080    -2 
05     0x20400000    0x10004000     0x00000080     0x00000040    -3 
06     0x10004000    0x00000080     0x00000040     0x40800000    -3 
07     0x00000080    0x00000040     0x40800000     0x20008000    -1 
08     0x00000040    0x40800000     0x20008000     0x00000000    -1 
09     0x40800000    0x20008000     0x00000000     0x00000001    -3 
10     0x20008000    0x00000000     0x00000001     0x81000000    -2 
11     0x00000000    0x00000001     0x81000000     0x40010000    -1 
12     0x00000001    0x81000000     0x40010000     0x00000200    -2 
13     0x81000000    0x40010000     0x00000200     0x00000100    -2 
14     0x40010000    0x00000200     0x00000100     0x02000001    -3 
15     0x00000200    0x00000100     0x02000001     0x80020000    -1 
16     0x00000100    0x02000001     0x80020000     0x00000000    -2 
17     0x02000001    0x80020000     0x00000000     0x00000004    -3 
18     0x80020000    0x00000000     0x00000004     0x04000002    -1 
19     0x00000000    0x00000004     0x04000002     0x00040001    -1 
20     0x00000004    0x04000002     0x00040001     0x00000800    -2 
21     0x04000002    0x00040001     0x00000800     0x00000400    -3 
22     0x00040001    0x00000800     0x00000400     0x08000004    -3 
23     0x00000800    0x00000400     0x08000004     0x00080002    -1 
24     0x00000400    0x08000004     0x00080002     0x00000000    -2 
25     0x08000004    0x00080002     0x00000000     0x00000010    -3 
26     0x00080002    0x00000000     0x00000010     0x10000008    -2 
27     0x00000000    0x00000010     0x10000008     0x00100004    -1 
28     0x00000010    0x10000008     0x00100004     0x00002000    -2 
29     0x10000008    0x00100004     0x00002000     0x00001000    -3 
30     0x00100004    0x00002000     0x00001000     0x20000010    -3 
31     0x00002000    0x00001000     0x20000010     0x00200008    -1 
32     0x00001000    0x20000010     0x00200008     0x00000000    -2 
33     0x20000010    0x00200008     0x00000000     0x00000040    -3 
34     0x00200008    0x00000000     0x00000040     0x40000020    -2 
35     0x00000000    0x00000040     0x40000020     0x00400010    -1 
36     0x00000040    0x40000020     0x00400010     0x00008000    -2 
37     0x40000020    0x00400010     0x00008000     0x00004000    -3 
38     0x00400010    0x00008000     0x00004000     0x80000040    -3 
39     0x00008000    0x00004000     0x80000040     0x00800020    -1 
40     0x00004000    0x80000040     0x00800020     0x00000000    -2 
41     0x80000040    0x00800020     0x00000000     0x00000100    -2 
42     0x00800020    0x00000000     0x00000100     0x00000081    -2 
43     0x00000000    0x00000100     0x00000081     0x01000040    -   
------------------ 
42 Round CHAM-128 Total Weight: -85 
Time cost: 218.73 seconds ==  3.65 minutes == 0.06 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 228.49 seconds ==  3.81 minutes == 0.06 hours. 
Auto-search END! 
|************************************************************************|

///2019年07月23日14:06:17
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:42 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 81 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 82 
Time: 2.00 seconds.  
Searching CHAM-128 Bn_w: 83 
++++++++++++++Real weight: 83 +++++++++++
Time: 4.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000000    0x40000000     0x20400000     0x10004000    -0 
02     0x40000000    0x20400000     0x10004000     0x00000080    -2 
03     0x20400000    0x10004000     0x00000080     0x00000040    -3 
04     0x10004000    0x00000080     0x00000040     0x40800000    -3 
05     0x00000080    0x00000040     0x40800000     0x20008000    -1 
06     0x00000040    0x40800000     0x20008000     0x00000000    -1 
07     0x40800000    0x20008000     0x00000000     0x00000001    -3 
08     0x20008000    0x00000000     0x00000001     0x81000000    -2 
09     0x00000000    0x00000001     0x81000000     0x40010000    -1 
10     0x00000001    0x81000000     0x40010000     0x00000200    -2 
11     0x81000000    0x40010000     0x00000200     0x00000100    -2 
12     0x40010000    0x00000200     0x00000100     0x02000001    -3 
13     0x00000200    0x00000100     0x02000001     0x80020000    -1 
14     0x00000100    0x02000001     0x80020000     0x00000000    -2 
15     0x02000001    0x80020000     0x00000000     0x00000004    -3 
16     0x80020000    0x00000000     0x00000004     0x04000002    -1 
17     0x00000000    0x00000004     0x04000002     0x00040001    -1 
18     0x00000004    0x04000002     0x00040001     0x00000800    -2 
19     0x04000002    0x00040001     0x00000800     0x00000400    -3 
20     0x00040001    0x00000800     0x00000400     0x08000004    -3 
21     0x00000800    0x00000400     0x08000004     0x00080002    -1 
22     0x00000400    0x08000004     0x00080002     0x00000000    -2 
23     0x08000004    0x00080002     0x00000000     0x00000010    -3 
24     0x00080002    0x00000000     0x00000010     0x10000008    -2 
25     0x00000000    0x00000010     0x10000008     0x00100004    -1 
26     0x00000010    0x10000008     0x00100004     0x00002000    -2 
27     0x10000008    0x00100004     0x00002000     0x00001000    -3 
28     0x00100004    0x00002000     0x00001000     0x20000010    -3 
29     0x00002000    0x00001000     0x20000010     0x00200008    -1 
30     0x00001000    0x20000010     0x00200008     0x00000000    -2 
31     0x20000010    0x00200008     0x00000000     0x00000040    -3 
32     0x00200008    0x00000000     0x00000040     0x40000020    -2 
33     0x00000000    0x00000040     0x40000020     0x00400010    -1 
34     0x00000040    0x40000020     0x00400010     0x00008000    -2 
35     0x40000020    0x00400010     0x00008000     0x00004000    -3 
36     0x00400010    0x00008000     0x00004000     0x80000040    -3 
37     0x00008000    0x00004000     0x80000040     0x00800020    -1 
38     0x00004000    0x80000040     0x00800020     0x00000000    -2 
39     0x80000040    0x00800020     0x00000000     0x00000100    -2 
40     0x00800020    0x00000000     0x00000100     0x00000081    -2 
41     0x00000000    0x00000100     0x00000081     0x01000040    -1 
42     0x00000100    0x00000081     0x01000040     0x00020000    -2 
43     0x00000081    0x01000040     0x00020000     0x00010000    -   
------------------ 
42 Round CHAM-128 Total Weight: -83 
Time cost: 4.45 seconds ==  0.07 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 15.24 seconds ==  0.25 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:11:09
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:43 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 83 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 84 
Time: 6.00 seconds.  
Searching CHAM-128 Bn_w: 85 
Time: 55.00 seconds.  
Searching CHAM-128 Bn_w: 86 
++++++++++++++Real weight: 86 +++++++++++
Time: 57.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000000    0x40000000     0x20400000     0x10004000    -0 
02     0x40000000    0x20400000     0x10004000     0x00000080    -2 
03     0x20400000    0x10004000     0x00000080     0x00000040    -3 
04     0x10004000    0x00000080     0x00000040     0x40800000    -3 
05     0x00000080    0x00000040     0x40800000     0x20008000    -1 
06     0x00000040    0x40800000     0x20008000     0x00000000    -1 
07     0x40800000    0x20008000     0x00000000     0x00000001    -3 
08     0x20008000    0x00000000     0x00000001     0x81000000    -2 
09     0x00000000    0x00000001     0x81000000     0x40010000    -1 
10     0x00000001    0x81000000     0x40010000     0x00000200    -2 
11     0x81000000    0x40010000     0x00000200     0x00000100    -2 
12     0x40010000    0x00000200     0x00000100     0x02000001    -3 
13     0x00000200    0x00000100     0x02000001     0x80020000    -1 
14     0x00000100    0x02000001     0x80020000     0x00000000    -2 
15     0x02000001    0x80020000     0x00000000     0x00000004    -3 
16     0x80020000    0x00000000     0x00000004     0x04000002    -1 
17     0x00000000    0x00000004     0x04000002     0x00040001    -1 
18     0x00000004    0x04000002     0x00040001     0x00000800    -2 
19     0x04000002    0x00040001     0x00000800     0x00000400    -3 
20     0x00040001    0x00000800     0x00000400     0x08000004    -3 
21     0x00000800    0x00000400     0x08000004     0x00080002    -1 
22     0x00000400    0x08000004     0x00080002     0x00000000    -2 
23     0x08000004    0x00080002     0x00000000     0x00000010    -3 
24     0x00080002    0x00000000     0x00000010     0x10000008    -2 
25     0x00000000    0x00000010     0x10000008     0x00100004    -1 
26     0x00000010    0x10000008     0x00100004     0x00002000    -2 
27     0x10000008    0x00100004     0x00002000     0x00001000    -3 
28     0x00100004    0x00002000     0x00001000     0x20000010    -3 
29     0x00002000    0x00001000     0x20000010     0x00200008    -1 
30     0x00001000    0x20000010     0x00200008     0x00000000    -2 
31     0x20000010    0x00200008     0x00000000     0x00000040    -3 
32     0x00200008    0x00000000     0x00000040     0x40000020    -2 
33     0x00000000    0x00000040     0x40000020     0x00400010    -1 
34     0x00000040    0x40000020     0x00400010     0x00008000    -2 
35     0x40000020    0x00400010     0x00008000     0x00004000    -3 
36     0x00400010    0x00008000     0x00004000     0x80000040    -3 
37     0x00008000    0x00004000     0x80000040     0x00800020    -1 
38     0x00004000    0x80000040     0x00800020     0x00000000    -2 
39     0x80000040    0x00800020     0x00000000     0x00000100    -2 
40     0x00800020    0x00000000     0x00000100     0x00000081    -2 
41     0x00000000    0x00000100     0x00000081     0x01000040    -1 
42     0x00000100    0x00000081     0x01000040     0x00020000    -2 
43     0x00000081    0x01000040     0x00020000     0x00010000    -3 
44     0x01000040    0x00020000     0x00010000     0x00000102    -   
------------------ 
43 Round CHAM-128 Total Weight: -86 
Time cost: 57.32 seconds ==  0.96 minutes == 0.02 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 66.74 seconds ==  1.11 minutes == 0.02 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:14:26
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:44 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 86 
Time: 14.00 seconds.  
Searching CHAM-128 Bn_w: 87 
Time: 90.00 seconds.  
Searching CHAM-128 Bn_w: 88 
++++++++++++++Real weight: 87 +++++++++++
Time: 95.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -   
------------------ 
44 Round CHAM-128 Total Weight: -88 /////87
Time cost: 95.57 seconds ==  1.59 minutes == 0.03 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 105.37 seconds ==  1.76 minutes == 0.03 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:20:48
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:45 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 87 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 88 
Time: 1.00 seconds.  
Searching CHAM-128 Bn_w: 89 
++++++++++++++Real weight: 88 +++++++++++
Time: 3.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -   
------------------ 
45 Round CHAM-128 Total Weight: -89  ////88///88
Time cost: 3.79 seconds ==  0.06 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 13.65 seconds ==  0.23 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日14:27:04
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:46 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 88 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 89 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 90 
++++++++++++++Real weight: 90 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -   
------------------ 
46 Round CHAM-128 Total Weight: -90 
Time cost: 0.90 seconds ==  0.01 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.46 seconds ==  0.19 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:29:08
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:47 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 90 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 91 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 92 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 93 
++++++++++++++Real weight: 93 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -   
------------------ 
47 Round CHAM-128 Total Weight: -93 
Time cost: 1.57 seconds ==  0.03 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.46 seconds ==  0.19 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:34:39
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:48 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 93 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 94 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 95 
Time: 14.00 seconds.  
Searching CHAM-128 Bn_w: 96 
++++++++++++++Real weight: 96 +++++++++++
Time: 16.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -   
------------------ 
48 Round CHAM-128 Total Weight: -96 
Time cost: 16.82 seconds ==  0.28 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 27.40 seconds ==  0.46 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:39:29
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:49 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 96 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 97 
++++++++++++++Real weight: 97 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -   
------------------ 
49 Round CHAM-128 Total Weight: -97 
Time cost: 1.08 seconds ==  0.02 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.66 seconds ==  0.19 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日14:58:00
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:50 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 97 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 98 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 99 
++++++++++++++Real weight: 99 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -   
------------------ 
50 Round CHAM-128 Total Weight: -99 
Time cost: 1.04 seconds ==  0.02 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.13 seconds ==  0.19 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日15:06:42
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:51 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 99 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 100 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 101 
Time: 2.00 seconds.  
Searching CHAM-128 Bn_w: 102 
++++++++++++++Real weight: 102 +++++++++++
Time: 3.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -   
------------------ 
51 Round CHAM-128 Total Weight: -102 
Time cost: 3.87 seconds ==  0.06 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 13.81 seconds ==  0.23 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:11:32
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:52 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 11.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 102 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 103 
Time: 2.00 seconds.  
Searching CHAM-128 Bn_w: 104 
++++++++++++++Real weight: 104 +++++++++++
Time: 3.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -   
------------------ 
52 Round CHAM-128 Total Weight: -104 
Time cost: 3.08 seconds ==  0.05 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 14.13 seconds ==  0.24 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:14:01
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:53 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 104 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 105 
++++++++++++++Real weight: 105 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -   
------------------ 
53 Round CHAM-128 Total Weight: -105 
Time cost: 0.36 seconds ==  0.01 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 10.82 seconds ==  0.18 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:23:26
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:54 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 105 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 106 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 107 
++++++++++++++Real weight: 107 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -   
------------------ 
54 Round CHAM-128 Total Weight: -107 
Time cost: 0.33 seconds ==  0.01 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 10.30 seconds ==  0.17 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:26:09
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:55 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 11.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 107 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 108 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 109 
Time: 1.00 seconds.  
Searching CHAM-128 Bn_w: 110 
++++++++++++++Real weight: 110 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -   
------------------ 
55 Round CHAM-128 Total Weight: -110 
Time cost: 1.58 seconds ==  0.03 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 12.95 seconds ==  0.22 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:29:06
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:56 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 110 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 111 
Time: 1.00 seconds.  
Searching CHAM-128 Bn_w: 112 
Time: 19.00 seconds.  
Searching CHAM-128 Bn_w: 113 
++++++++++++++Real weight: 113 +++++++++++
Time: 21.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -   
------------------ 
56 Round CHAM-128 Total Weight: -113 
Time cost: 21.61 seconds ==  0.36 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 31.77 seconds ==  0.53 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:32:11
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:57 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 113 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 114 
++++++++++++++Real weight: 114 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -1 
58     0x00001000    0x20000010     0x00200008     0x00000000    -   
------------------ 
57 Round CHAM-128 Total Weight: -114 
Time cost: 1.84 seconds ==  0.03 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.81 seconds ==  0.20 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:45:46
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:58 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 114 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 115 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 116 
++++++++++++++Real weight: 116 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -1 
58     0x00001000    0x20000010     0x00200008     0x00000000    -2 
59     0x20000010    0x00200008     0x00000000     0x00000040    -   
------------------ 
58 Round CHAM-128 Total Weight: -116 
Time cost: 1.84 seconds ==  0.03 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.79 seconds ==  0.20 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:47:44
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:59 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 116 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 117 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 118 
Time: 10.00 seconds.  
Searching CHAM-128 Bn_w: 119 
++++++++++++++Real weight: 119 +++++++++++
Time: 12.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -1 
58     0x00001000    0x20000010     0x00200008     0x00000000    -2 
59     0x20000010    0x00200008     0x00000000     0x00000040    -3 
60     0x00200008    0x00000000     0x00000040     0x40000020    -   
------------------ 
59 Round CHAM-128 Total Weight: -119 
Time cost: 12.30 seconds ==  0.20 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 22.23 seconds ==  0.37 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日15:50:38
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:60 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 119 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 120 
Time: 6.00 seconds.  
Searching CHAM-128 Bn_w: 121 
++++++++++++++Real weight: 121 +++++++++++
Time: 8.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -1 
58     0x00001000    0x20000010     0x00200008     0x00000000    -2 
59     0x20000010    0x00200008     0x00000000     0x00000040    -3 
60     0x00200008    0x00000000     0x00000040     0x40000020    -2 
61     0x00000000    0x00000040     0x40000020     0x00400010    -   
------------------ 
60 Round CHAM-128 Total Weight: -121 
Time cost: 8.30 seconds ==  0.14 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 18.45 seconds ==  0.31 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:55:29
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:61 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 121 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 122 
++++++++++++++Real weight: 122 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -1 
58     0x00001000    0x20000010     0x00200008     0x00000000    -2 
59     0x20000010    0x00200008     0x00000000     0x00000040    -3 
60     0x00200008    0x00000000     0x00000040     0x40000020    -2 
61     0x00000000    0x00000040     0x40000020     0x00400010    -1 
62     0x00000040    0x40000020     0x00400010     0x00008000    -   
------------------ 
61 Round CHAM-128 Total Weight: -122 
Time cost: 1.56 seconds ==  0.03 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.80 seconds ==  0.20 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:57:43
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:62 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 122 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 123 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 124 
++++++++++++++Real weight: 124 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -1 
58     0x00001000    0x20000010     0x00200008     0x00000000    -2 
59     0x20000010    0x00200008     0x00000000     0x00000040    -3 
60     0x00200008    0x00000000     0x00000040     0x40000020    -2 
61     0x00000000    0x00000040     0x40000020     0x00400010    -1 
62     0x00000040    0x40000020     0x00400010     0x00008000    -2 
63     0x40000020    0x00400010     0x00008000     0x00004000    -   
------------------ 
62 Round CHAM-128 Total Weight: -124 
Time cost: 1.33 seconds ==  0.02 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.28 seconds ==  0.19 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日16:03:43
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:63 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 124 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 125 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 126 
Time: 2.00 seconds.  
Searching CHAM-128 Bn_w: 127 
++++++++++++++Real weight: 127 +++++++++++
Time: 4.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -1 
58     0x00001000    0x20000010     0x00200008     0x00000000    -2 
59     0x20000010    0x00200008     0x00000000     0x00000040    -3 
60     0x00200008    0x00000000     0x00000040     0x40000020    -2 
61     0x00000000    0x00000040     0x40000020     0x00400010    -1 
62     0x00000040    0x40000020     0x00400010     0x00008000    -2 
63     0x40000020    0x00400010     0x00008000     0x00004000    -3 
64     0x00400010    0x00008000     0x00004000     0x80000040    -   
------------------ 
63 Round CHAM-128 Total Weight: -127 
Time cost: 4.14 seconds ==  0.07 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 14.17 seconds ==  0.24 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日16:18:01
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:64 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search odd-round============= 
Searching CHAM-128 Bn_w: 127 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 128 
Time: 2.00 seconds.  
Searching CHAM-128 Bn_w: 129 
Time: 48.00 seconds.  
Searching CHAM-128 Bn_w: 130 
++++++++++++++Real weight: 130 +++++++++++
Time: 54.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x80000000    0x40000000     0x00408000     0x00200080    -0 
02     0x40000000    0x00408000     0x00200080     0x00000000    -2 
03     0x00408000    0x00200080     0x00000000     0x01000000    -3 
04     0x00200080    0x00000000     0x01000000     0x00810000    -2 
05     0x00000000    0x01000000     0x00810000     0x00400100    -1 
06     0x01000000    0x00810000     0x00400100     0x00000002    -1 
07     0x00810000    0x00400100     0x00000002     0x00000001    -3 
08     0x00400100    0x00000002     0x00000001     0x01020000    -3 
09     0x00000002    0x00000001     0x01020000     0x00800200    -1 
10     0x00000001    0x01020000     0x00800200     0x00000000    -2 
11     0x01020000    0x00800200     0x00000000     0x04000000    -3 
12     0x00800200    0x00000000     0x04000000     0x02040000    -2 
13     0x00000000    0x04000000     0x02040000     0x01000400    -1 
14     0x04000000    0x02040000     0x01000400     0x00000008    -2 
15     0x02040000    0x01000400     0x00000008     0x00000004    -3 
16     0x01000400    0x00000008     0x00000004     0x04080000    -3 
17     0x00000008    0x00000004     0x04080000     0x02000800    -1 
18     0x00000004    0x04080000     0x02000800     0x00000000    -2 
19     0x04080000    0x02000800     0x00000000     0x10000000    -3 
20     0x02000800    0x00000000     0x10000000     0x08100000    -2 
21     0x00000000    0x10000000     0x08100000     0x04001000    -1 
22     0x10000000    0x08100000     0x04001000     0x00000020    -2 
23     0x08100000    0x04001000     0x00000020     0x00000010    -3 
24     0x04001000    0x00000020     0x00000010     0x10200000    -3 
25     0x00000020    0x00000010     0x10200000     0x08002000    -1 
26     0x00000010    0x10200000     0x08002000     0x00000000    -2 
27     0x10200000    0x08002000     0x00000000     0x40000000    -3 
28     0x08002000    0x00000000     0x40000000     0x20400000    -2 
29     0x00000000    0x40000000     0x20400000     0x10004000    -0 
30     0x40000000    0x20400000     0x10004000     0x00000080    -2 
31     0x20400000    0x10004000     0x00000080     0x00000040    -3 
32     0x10004000    0x00000080     0x00000040     0x40800000    -3 
33     0x00000080    0x00000040     0x40800000     0x20008000    -1 
34     0x00000040    0x40800000     0x20008000     0x00000000    -1 
35     0x40800000    0x20008000     0x00000000     0x00000001    -3 
36     0x20008000    0x00000000     0x00000001     0x81000000    -2 
37     0x00000000    0x00000001     0x81000000     0x40010000    -1 
38     0x00000001    0x81000000     0x40010000     0x00000200    -2 
39     0x81000000    0x40010000     0x00000200     0x00000100    -2 
40     0x40010000    0x00000200     0x00000100     0x02000001    -3 
41     0x00000200    0x00000100     0x02000001     0x80020000    -1 
42     0x00000100    0x02000001     0x80020000     0x00000000    -2 
43     0x02000001    0x80020000     0x00000000     0x00000004    -3 
44     0x80020000    0x00000000     0x00000004     0x04000002    -1 
45     0x00000000    0x00000004     0x04000002     0x00040001    -1 
46     0x00000004    0x04000002     0x00040001     0x00000800    -2 
47     0x04000002    0x00040001     0x00000800     0x00000400    -3 
48     0x00040001    0x00000800     0x00000400     0x08000004    -3 
49     0x00000800    0x00000400     0x08000004     0x00080002    -1 
50     0x00000400    0x08000004     0x00080002     0x00000000    -2 
51     0x08000004    0x00080002     0x00000000     0x00000010    -3 
52     0x00080002    0x00000000     0x00000010     0x10000008    -2 
53     0x00000000    0x00000010     0x10000008     0x00100004    -1 
54     0x00000010    0x10000008     0x00100004     0x00002000    -2 
55     0x10000008    0x00100004     0x00002000     0x00001000    -3 
56     0x00100004    0x00002000     0x00001000     0x20000010    -3 
57     0x00002000    0x00001000     0x20000010     0x00200008    -1 
58     0x00001000    0x20000010     0x00200008     0x00000000    -2 
59     0x20000010    0x00200008     0x00000000     0x00000040    -3 
60     0x00200008    0x00000000     0x00000040     0x40000020    -2 
61     0x00000000    0x00000040     0x40000020     0x00400010    -1 
62     0x00000040    0x40000020     0x00400010     0x00008000    -2 
63     0x40000020    0x00400010     0x00008000     0x00004000    -3 
64     0x00400010    0x00008000     0x00004000     0x80000040    -3 
65     0x00008000    0x00004000     0x80000040     0x00800020    -   
------------------ 
64 Round CHAM-128 Total Weight: -130 
Time cost: 54.98 seconds ==  0.92 minutes == 0.02 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 64.96 seconds ==  1.08 minutes == 0.02 hours. 
Auto-search END! 
|************************************************************************|

























///////////////////////////////////////偶数轮的最优差分路径//////////////////////////////
///////////////////////////////////////偶数轮的最优差分路径//////////////////////////////
///////////////////////////////////////偶数轮的最优差分路径//////////////////////////////
///////////////////////////////////////偶数轮的最优差分路径//////////////////////////////
//2019年07月23日10:29:45
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:35 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 67 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 68 
Time: 1.00 seconds.  
Searching CHAM-128 Bn_w: 69 
++++++++++++++Real weight: 69 +++++++++++
Time: 1.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000000    0x00000000     0x00000000     0x00000000    -2 
02     0x00000000    0x40000000     0x20400000     0x10004000    -0 
03     0x40000000    0x20400000     0x10004000     0x00000080    -2 
04     0x20400000    0x10004000     0x00000080     0x00000040    -3 
05     0x10004000    0x00000080     0x00000040     0x40800000    -3 
06     0x00000080    0x00000040     0x40800000     0x20008000    -1 
07     0x00000040    0x40800000     0x20008000     0x00000000    -1 
08     0x40800000    0x20008000     0x00000000     0x00000001    -3 
09     0x20008000    0x00000000     0x00000001     0x81000000    -2 
10     0x00000000    0x00000001     0x81000000     0x40010000    -1 
11     0x00000001    0x81000000     0x40010000     0x00000200    -2 
12     0x81000000    0x40010000     0x00000200     0x00000100    -2 
13     0x40010000    0x00000200     0x00000100     0x02000001    -3 
14     0x00000200    0x00000100     0x02000001     0x80020000    -1 
15     0x00000100    0x02000001     0x80020000     0x00000000    -2 
16     0x02000001    0x80020000     0x00000000     0x00000004    -3 
17     0x80020000    0x00000000     0x00000004     0x04000002    -1 
18     0x00000000    0x00000004     0x04000002     0x00040001    -1 
19     0x00000004    0x04000002     0x00040001     0x00000800    -2 
20     0x04000002    0x00040001     0x00000800     0x00000400    -3 
21     0x00040001    0x00000800     0x00000400     0x08000004    -3 
22     0x00000800    0x00000400     0x08000004     0x00080002    -1 
23     0x00000400    0x08000004     0x00080002     0x00000000    -2 
24     0x08000004    0x00080002     0x00000000     0x00000010    -3 
25     0x00080002    0x00000000     0x00000010     0x10000008    -2 
26     0x00000000    0x00000010     0x10000008     0x00100004    -1 
27     0x00000010    0x10000008     0x00100004     0x00002000    -2 
28     0x10000008    0x00100004     0x00002000     0x00001000    -3 
29     0x00100004    0x00002000     0x00001000     0x20000010    -3 
30     0x00002000    0x00001000     0x20000010     0x00200008    -1 
31     0x00001000    0x20000010     0x00200008     0x00000000    -2 
32     0x20000010    0x00200008     0x00000000     0x00000040    -3 
33     0x00200008    0x00000000     0x00000040     0x40000020    -2 
34     0x00000000    0x00000040     0x40000020     0x00400010    -1 
35     0x00000040    0x40000020     0x00400010     0x00008000    -2 
36     0x40000020    0x00400010     0x00008000     0x00004000    -   
------------------ 
35 Round CHAM-128 Total Weight: -69 
Time cost: 1.10 seconds ==  0.02 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.90 seconds ==  0.20 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日11:51:18
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:36 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 11.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 69 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 70 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 71 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 72 
++++++++++++++Real weight: 72 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000010    0x10200000     0x08002000     0x00000000    -2 
02     0x10200000    0x08002000     0x00000000     0x40000000    -3 
03     0x08002000    0x00000000     0x40000000     0x20400000    -2
04     0x00000000    0x40000000     0x20400000     0x10004000    -0  
05     0x40000000    0x20400000     0x10004000     0x00000080    -2 
06     0x20400000    0x10004000     0x00000080     0x00000040    -3 
07     0x10004000    0x00000080     0x00000040     0x40800000    -3 
08     0x00000080    0x00000040     0x40800000     0x20008000    -1 
09     0x00000040    0x40800000     0x20008000     0x00000000    -1 
10     0x40800000    0x20008000     0x00000000     0x00000001    -3 
11     0x20008000    0x00000000     0x00000001     0x81000000    -2 
12     0x00000000    0x00000001     0x81000000     0x40010000    -1 
13     0x00000001    0x81000000     0x40010000     0x00000200    -2 
14     0x81000000    0x40010000     0x00000200     0x00000100    -2 
15     0x40010000    0x00000200     0x00000100     0x02000001    -3 
16     0x00000200    0x00000100     0x02000001     0x80020000    -1 
17     0x00000100    0x02000001     0x80020000     0x00000000    -2 
18     0x02000001    0x80020000     0x00000000     0x00000004    -3 
19     0x80020000    0x00000000     0x00000004     0x04000002    -1 
20     0x00000000    0x00000004     0x04000002     0x00040001    -1 
21     0x00000004    0x04000002     0x00040001     0x00000800    -2 
22     0x04000002    0x00040001     0x00000800     0x00000400    -3 
23     0x00040001    0x00000800     0x00000400     0x08000004    -3 
24     0x00000800    0x00000400     0x08000004     0x00080002    -1 
25     0x00000400    0x08000004     0x00080002     0x00000000    -2 
26     0x08000004    0x00080002     0x00000000     0x00000010    -3 
27     0x00080002    0x00000000     0x00000010     0x10000008    -2 
28     0x00000000    0x00000010     0x10000008     0x00100004    -1 
29     0x00000010    0x10000008     0x00100004     0x00002000    -2 
30     0x10000008    0x00100004     0x00002000     0x00001000    -3 
31     0x00100004    0x00002000     0x00001000     0x20000010    -3 
32     0x00002000    0x00001000     0x20000010     0x00200008    -1 
33     0x00001000    0x20000010     0x00200008     0x00000000    -2 
34     0x20000010    0x00200008     0x00000000     0x00000040    -3 
35     0x00200008    0x00000000     0x00000040     0x40000020    -2 
36     0x00000000    0x00000040     0x40000020     0x00400010    -1 
37     0x00000040    0x40000020     0x00400010     0x00008000    -   
------------------ 
36 Round CHAM-128 Total Weight: -72 
Time cost: 0.02 seconds ==  0.00 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 11.23 seconds ==  0.19 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日11:54:30
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:37 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 72 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 73 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 74 
++++++++++++++Real weight: 74 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000010    0x10200000     0x08002000     0x00000000    -2 
02     0x10200000    0x08002000     0x00000000     0x40000000    -3 
03     0x08002000    0x00000000     0x40000000     0x20400000    -2
04     0x00000000    0x40000000     0x20400000     0x10004000    -0 
05     0x40000000    0x20400000     0x10004000     0x00000080    -2 
06     0x20400000    0x10004000     0x00000080     0x00000040    -3 
07     0x10004000    0x00000080     0x00000040     0x40800000    -3 
08     0x00000080    0x00000040     0x40800000     0x20008000    -1 
09     0x00000040    0x40800000     0x20008000     0x00000000    -1 
10     0x40800000    0x20008000     0x00000000     0x00000001    -3 
11     0x20008000    0x00000000     0x00000001     0x81000000    -2 
12     0x00000000    0x00000001     0x81000000     0x40010000    -1 
13     0x00000001    0x81000000     0x40010000     0x00000200    -2 
14     0x81000000    0x40010000     0x00000200     0x00000100    -2 
15     0x40010000    0x00000200     0x00000100     0x02000001    -3 
16     0x00000200    0x00000100     0x02000001     0x80020000    -1 
17     0x00000100    0x02000001     0x80020000     0x00000000    -2 
18     0x02000001    0x80020000     0x00000000     0x00000004    -3 
19     0x80020000    0x00000000     0x00000004     0x04000002    -1 
20     0x00000000    0x00000004     0x04000002     0x00040001    -1 
21     0x00000004    0x04000002     0x00040001     0x00000800    -2 
22     0x04000002    0x00040001     0x00000800     0x00000400    -3 
23     0x00040001    0x00000800     0x00000400     0x08000004    -3 
24     0x00000800    0x00000400     0x08000004     0x00080002    -1 
25     0x00000400    0x08000004     0x00080002     0x00000000    -2 
26     0x08000004    0x00080002     0x00000000     0x00000010    -3 
27     0x00080002    0x00000000     0x00000010     0x10000008    -2 
28     0x00000000    0x00000010     0x10000008     0x00100004    -1 
29     0x00000010    0x10000008     0x00100004     0x00002000    -2 
30     0x10000008    0x00100004     0x00002000     0x00001000    -3 
31     0x00100004    0x00002000     0x00001000     0x20000010    -3 
32     0x00002000    0x00001000     0x20000010     0x00200008    -1 
33     0x00001000    0x20000010     0x00200008     0x00000000    -2 
34     0x20000010    0x00200008     0x00000000     0x00000040    -3 
35     0x00200008    0x00000000     0x00000040     0x40000020    -2 
36     0x00000000    0x00000040     0x40000020     0x00400010    -1 
37     0x00000040    0x40000020     0x00400010     0x00008000    -2 
38     0x40000020    0x00400010     0x00008000     0x00004000    -   
------------------ 
37 Round CHAM-128 Total Weight: -74 
Time cost: 0.03 seconds ==  0.00 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 9.92 seconds ==  0.17 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日12:04:22
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:38 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 74 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 75 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 76 
++++++++++++++Real weight: 76 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000000    0x00000000     0x00000000     0x00000000    -3 
02     0x00000000    0x00000000     0x00000000     0x00000000    -1 
03     0x00000000    0x00000000     0x00000000     0x00000000    -2 
04     0x00000000    0x00000000     0x00000000     0x00000000    -3 
05     0x08002000    0x00000000     0x40000000     0x20400000    -2 
06     0x00000000    0x40000000     0x20400000     0x10004000    -0 
07     0x40000000    0x20400000     0x10004000     0x00000080    -2 
08     0x20400000    0x10004000     0x00000080     0x00000040    -3 
09     0x10004000    0x00000080     0x00000040     0x40800000    -3 
10     0x00000080    0x00000040     0x40800000     0x20008000    -1 
11     0x00000040    0x40800000     0x20008000     0x00000000    -1 
12     0x40800000    0x20008000     0x00000000     0x00000001    -3 
13     0x20008000    0x00000000     0x00000001     0x81000000    -2 
14     0x00000000    0x00000001     0x81000000     0x40010000    -1 
15     0x00000001    0x81000000     0x40010000     0x00000200    -2 
16     0x81000000    0x40010000     0x00000200     0x00000100    -2 
17     0x40010000    0x00000200     0x00000100     0x02000001    -3 
18     0x00000200    0x00000100     0x02000001     0x80020000    -1 
19     0x00000100    0x02000001     0x80020000     0x00000000    -2 
20     0x02000001    0x80020000     0x00000000     0x00000004    -3 
21     0x80020000    0x00000000     0x00000004     0x04000002    -1 
22     0x00000000    0x00000004     0x04000002     0x00040001    -1 
23     0x00000004    0x04000002     0x00040001     0x00000800    -2 
24     0x04000002    0x00040001     0x00000800     0x00000400    -3 
25     0x00040001    0x00000800     0x00000400     0x08000004    -3 
26     0x00000800    0x00000400     0x08000004     0x00080002    -1 
27     0x00000400    0x08000004     0x00080002     0x00000000    -2 
28     0x08000004    0x00080002     0x00000000     0x00000010    -3 
29     0x00080002    0x00000000     0x00000010     0x10000008    -2 
30     0x00000000    0x00000010     0x10000008     0x00100004    -1 
31     0x00000010    0x10000008     0x00100004     0x00002000    -2 
32     0x10000008    0x00100004     0x00002000     0x00001000    -3 
33     0x00100004    0x00002000     0x00001000     0x20000010    -3 
34     0x00002000    0x00001000     0x20000010     0x00200008    -1 
35     0x00001000    0x20000010     0x00200008     0x00000000    -2 
36     0x20000010    0x00200008     0x00000000     0x00000040    -3 
37     0x00200008    0x00000000     0x00000040     0x40000020    -2 
38     0x00000000    0x00000040     0x40000020     0x00400010    -1 
39     0x00000040    0x40000020     0x00400010     0x00008000    -   
------------------ 
38 Round CHAM-128 Total Weight: -76 
Time cost: 0.00 seconds ==  0.00 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 9.43 seconds ==  0.16 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日13:07:30
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:39 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 76 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 77 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 78 
++++++++++++++Real weight: 78 +++++++++++
Time: 0.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00000000    0x00000000     0x00000000     0x00000000    -3 
02     0x00000000    0x00000000     0x00000000     0x00000000    -1 
03     0x00000000    0x00000000     0x00000000     0x00000000    -2 
04     0x00000000    0x00000000     0x00000000     0x00000000    -3 
05     0x08002000    0x00000000     0x40000000     0x20400000    -2 
06     0x00000000    0x40000000     0x20400000     0x10004000    -0 
07     0x40000000    0x20400000     0x10004000     0x00000080    -2 
08     0x20400000    0x10004000     0x00000080     0x00000040    -3 
09     0x10004000    0x00000080     0x00000040     0x40800000    -3 
10     0x00000080    0x00000040     0x40800000     0x20008000    -1 
11     0x00000040    0x40800000     0x20008000     0x00000000    -1 
12     0x40800000    0x20008000     0x00000000     0x00000001    -3 
13     0x20008000    0x00000000     0x00000001     0x81000000    -2 
14     0x00000000    0x00000001     0x81000000     0x40010000    -1 
15     0x00000001    0x81000000     0x40010000     0x00000200    -2 
16     0x81000000    0x40010000     0x00000200     0x00000100    -2 
17     0x40010000    0x00000200     0x00000100     0x02000001    -3 
18     0x00000200    0x00000100     0x02000001     0x80020000    -1 
19     0x00000100    0x02000001     0x80020000     0x00000000    -2 
20     0x02000001    0x80020000     0x00000000     0x00000004    -3 
21     0x80020000    0x00000000     0x00000004     0x04000002    -1 
22     0x00000000    0x00000004     0x04000002     0x00040001    -1 
23     0x00000004    0x04000002     0x00040001     0x00000800    -2 
24     0x04000002    0x00040001     0x00000800     0x00000400    -3 
25     0x00040001    0x00000800     0x00000400     0x08000004    -3 
26     0x00000800    0x00000400     0x08000004     0x00080002    -1 
27     0x00000400    0x08000004     0x00080002     0x00000000    -2 
28     0x08000004    0x00080002     0x00000000     0x00000010    -3 
29     0x00080002    0x00000000     0x00000010     0x10000008    -2 
30     0x00000000    0x00000010     0x10000008     0x00100004    -1 
31     0x00000010    0x10000008     0x00100004     0x00002000    -2 
32     0x10000008    0x00100004     0x00002000     0x00001000    -3 
33     0x00100004    0x00002000     0x00001000     0x20000010    -3 
34     0x00002000    0x00001000     0x20000010     0x00200008    -1 
35     0x00001000    0x20000010     0x00200008     0x00000000    -2 
36     0x20000010    0x00200008     0x00000000     0x00000040    -3 
37     0x00200008    0x00000000     0x00000040     0x40000020    -2 
38     0x00000000    0x00000040     0x40000020     0x00400010    -1 
39     0x00000040    0x40000020     0x00400010     0x00008000    -2 
40     0x40000020    0x00400010     0x00008000     0x00004000    -   
------------------ 
39 Round CHAM-128 Total Weight: -78 
Time cost: 0.00 seconds ==  0.00 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 9.64 seconds ==  0.16 minutes == 0.00 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日13:51:33
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:40 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 78 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 79 
Time: 3.00 seconds.  
Searching CHAM-128 Bn_w: 80 
Time: 69.00 seconds.  
Searching CHAM-128 Bn_w: 81 
++++++++++++++Real weight: 81 +++++++++++
Time: 120.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00004000    0x00002040     0x40001000     0x00800000    -2 
02     0x00002040    0x40001000     0x00800000     0x00400000    -2 
03     0x40001000    0x00800000     0x00400000     0x00004080    -2 
04     0x00800000    0x00400000     0x00004080     0x80002000    -1 
05     0x00400000    0x00004080     0x80002000     0x00000000    -2 
06     0x00004080    0x80002000     0x00000000     0x00010000    -3 
07     0x80002000    0x00000000     0x00010000     0x00008100    -1 
08     0x00000000    0x00010000     0x00008100     0x00004001    -1 
09     0x00010000    0x00008100     0x00004001     0x02000000    -2 
10     0x00008100    0x00004001     0x02000000     0x01000000    -3 
11     0x00004001    0x02000000     0x01000000     0x00010200    -3 
12     0x02000000    0x01000000     0x00010200     0x00008002    -1 
13     0x01000000    0x00010200     0x00008002     0x00000000    -2 
14     0x00010200    0x00008002     0x00000000     0x00040000    -3 
15     0x00008002    0x00000000     0x00040000     0x00020400    -2 
16     0x00000000    0x00040000     0x00020400     0x00010004    -1 
17     0x00040000    0x00020400     0x00010004     0x08000000    -2 
18     0x00020400    0x00010004     0x08000000     0x04000000    -3 
19     0x00010004    0x08000000     0x04000000     0x00040800    -3 
20     0x08000000    0x04000000     0x00040800     0x00020008    -1 
21     0x04000000    0x00040800     0x00020008     0x00000000    -2 
22     0x00040800    0x00020008     0x00000000     0x00100000    -3 
23     0x00020008    0x00000000     0x00100000     0x00081000    -2 
24     0x00000000    0x00100000     0x00081000     0x00040010    -1 
25     0x00100000    0x00081000     0x00040010     0x20000000    -2 
26     0x00081000    0x00040010     0x20000000     0x10000000    -3 
27     0x00040010    0x20000000     0x10000000     0x00102000    -3 
28     0x20000000    0x10000000     0x00102000     0x00080020    -1 
29     0x10000000    0x00102000     0x00080020     0x00000000    -2 
30     0x00102000    0x00080020     0x00000000     0x00400000    -3 
31     0x00080020    0x00000000     0x00400000     0x00204000    -2 
32     0x00000000    0x00400000     0x00204000     0x00100040    -1 
33     0x00400000    0x00204000     0x00100040     0x80000000    -2 
34     0x00204000    0x00100040     0x80000000     0x40000000    -3 
35     0x00100040    0x80000000     0x40000000     0x00408000    -3 
36     0x80000000    0x40000000     0x00408000     0x00200080    -0 
37     0x40000000    0x00408000     0x00200080     0x00000000    -2 
38     0x00408000    0x00200080     0x00000000     0x01000000    -3 
39     0x00200080    0x00000000     0x01000000     0x00810000    -2 
40     0x00000000    0x01000000     0x00810000     0x00400100    -1 
41     0x01000000    0x00810000     0x00400100     0x00000002    -   
------------------ 
40 Round CHAM-128 Total Weight: -81 
Time cost: 120.58 seconds ==  2.01 minutes == 0.03 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 130.09 seconds ==  2.17 minutes == 0.04 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日13:53:29
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:41 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 80 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 81 
Time: 3.00 seconds.  
Searching CHAM-128 Bn_w: 82 
++++++++++++++Real weight: 82 +++++++++++
Time: 33.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00004000    0x00002040     0x40001000     0x00800000    -2 
02     0x00002040    0x40001000     0x00800000     0x00400000    -2 
03     0x40001000    0x00800000     0x00400000     0x00004080    -2 
04     0x00800000    0x00400000     0x00004080     0x80002000    -1 
05     0x00400000    0x00004080     0x80002000     0x00000000    -2 
06     0x00004080    0x80002000     0x00000000     0x00010000    -3 
07     0x80002000    0x00000000     0x00010000     0x00008100    -1 
08     0x00000000    0x00010000     0x00008100     0x00004001    -1 
09     0x00010000    0x00008100     0x00004001     0x02000000    -2 
10     0x00008100    0x00004001     0x02000000     0x01000000    -3 
11     0x00004001    0x02000000     0x01000000     0x00010200    -3 
12     0x02000000    0x01000000     0x00010200     0x00008002    -1 
13     0x01000000    0x00010200     0x00008002     0x00000000    -2 
14     0x00010200    0x00008002     0x00000000     0x00040000    -3 
15     0x00008002    0x00000000     0x00040000     0x00020400    -2 
16     0x00000000    0x00040000     0x00020400     0x00010004    -1 
17     0x00040000    0x00020400     0x00010004     0x08000000    -2 
18     0x00020400    0x00010004     0x08000000     0x04000000    -3 
19     0x00010004    0x08000000     0x04000000     0x00040800    -3 
20     0x08000000    0x04000000     0x00040800     0x00020008    -1 
21     0x04000000    0x00040800     0x00020008     0x00000000    -2 
22     0x00040800    0x00020008     0x00000000     0x00100000    -3 
23     0x00020008    0x00000000     0x00100000     0x00081000    -2 
24     0x00000000    0x00100000     0x00081000     0x00040010    -1 
25     0x00100000    0x00081000     0x00040010     0x20000000    -2 
26     0x00081000    0x00040010     0x20000000     0x10000000    -3 
27     0x00040010    0x20000000     0x10000000     0x00102000    -3 
28     0x20000000    0x10000000     0x00102000     0x00080020    -1 
29     0x10000000    0x00102000     0x00080020     0x00000000    -2 
30     0x00102000    0x00080020     0x00000000     0x00400000    -3 
31     0x00080020    0x00000000     0x00400000     0x00204000    -2 
32     0x00000000    0x00400000     0x00204000     0x00100040    -1 
33     0x00400000    0x00204000     0x00100040     0x80000000    -2 
34     0x00204000    0x00100040     0x80000000     0x40000000    -3 
35     0x00100040    0x80000000     0x40000000     0x00408000    -3 
36     0x80000000    0x40000000     0x00408000     0x00200080    -0 
37     0x40000000    0x00408000     0x00200080     0x00000000    -2 
38     0x00408000    0x00200080     0x00000000     0x01000000    -3 
39     0x00200080    0x00000000     0x01000000     0x00810000    -2 
40     0x00000000    0x01000000     0x00810000     0x00400100    -1 
41     0x01000000    0x00810000     0x00400100     0x00000002    -1 
42     0x00810000    0x00400100     0x00000002     0x00000001    -   
------------------ 
41 Round CHAM-128 Total Weight: -82 
Time cost: 33.43 seconds ==  0.56 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 43.79 seconds ==  0.73 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:07:04
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:42 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 82 
Time: 1.00 seconds.  
Searching CHAM-128 Bn_w: 83 
++++++++++++++Real weight: 83 +++++++++++
Time: 27.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x08002000    0x00000000     0x40000000     0x20400000    -2 
02     0x00000000    0x40000000     0x20400000     0x10004000    -0 
03     0x40000000    0x20400000     0x10004000     0x00000080    -2 
04     0x20400000    0x10004000     0x00000080     0x00000040    -3 
05     0x10004000    0x00000080     0x00000040     0x40800000    -3 
06     0x00000080    0x00000040     0x40800000     0x20008000    -1 
07     0x00000040    0x40800000     0x20008000     0x00000000    -1 
08     0x40800000    0x20008000     0x00000000     0x00000001    -3 
09     0x20008000    0x00000000     0x00000001     0x81000000    -2 
10     0x00000000    0x00000001     0x81000000     0x40010000    -1 
11     0x00000001    0x81000000     0x40010000     0x00000200    -2 
12     0x81000000    0x40010000     0x00000200     0x00000100    -2 
13     0x40010000    0x00000200     0x00000100     0x02000001    -3 
14     0x00000200    0x00000100     0x02000001     0x80020000    -1 
15     0x00000100    0x02000001     0x80020000     0x00000000    -2 
16     0x02000001    0x80020000     0x00000000     0x00000004    -3 
17     0x80020000    0x00000000     0x00000004     0x04000002    -1 
18     0x00000000    0x00000004     0x04000002     0x00040001    -1 
19     0x00000004    0x04000002     0x00040001     0x00000800    -2 
20     0x04000002    0x00040001     0x00000800     0x00000400    -3 
21     0x00040001    0x00000800     0x00000400     0x08000004    -3 
22     0x00000800    0x00000400     0x08000004     0x00080002    -1 
23     0x00000400    0x08000004     0x00080002     0x00000000    -2 
24     0x08000004    0x00080002     0x00000000     0x00000010    -3 
25     0x00080002    0x00000000     0x00000010     0x10000008    -2 
26     0x00000000    0x00000010     0x10000008     0x00100004    -1 
27     0x00000010    0x10000008     0x00100004     0x00002000    -2 
28     0x10000008    0x00100004     0x00002000     0x00001000    -3 
29     0x00100004    0x00002000     0x00001000     0x20000010    -3 
30     0x00002000    0x00001000     0x20000010     0x00200008    -1 
31     0x00001000    0x20000010     0x00200008     0x00000000    -2 
32     0x20000010    0x00200008     0x00000000     0x00000040    -3 
33     0x00200008    0x00000000     0x00000040     0x40000020    -2 
34     0x00000000    0x00000040     0x40000020     0x00400010    -1 
35     0x00000040    0x40000020     0x00400010     0x00008000    -2 
36     0x40000020    0x00400010     0x00008000     0x00004000    -3 
37     0x00400010    0x00008000     0x00004000     0x80000040    -3 
38     0x00008000    0x00004000     0x80000040     0x00800020    -1 
39     0x00004000    0x80000040     0x00800020     0x00000000    -2 
40     0x80000040    0x00800020     0x00000000     0x00000100    -2 
41     0x00800020    0x00000000     0x00000100     0x00000081    -2 
42     0x00000000    0x00000100     0x00000081     0x01000040    -1 
43     0x00000100    0x00000081     0x01000040     0x00020000    -   
------------------ 
42 Round CHAM-128 Total Weight: -83 
Time cost: 27.01 seconds ==  0.45 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 36.57 seconds ==  0.61 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:10:52
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:43 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 83 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 84 
Time: 10.00 seconds.  
Searching CHAM-128 Bn_w: 85 
++++++++++++++Real weight: 85 +++++++++++
Time: 55.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x08002000    0x00000000     0x40000000     0x20400000    -2 
02     0x00000000    0x40000000     0x20400000     0x10004000    -0 
03     0x40000000    0x20400000     0x10004000     0x00000080    -2 
04     0x20400000    0x10004000     0x00000080     0x00000040    -3 
05     0x10004000    0x00000080     0x00000040     0x40800000    -3 
06     0x00000080    0x00000040     0x40800000     0x20008000    -1 
07     0x00000040    0x40800000     0x20008000     0x00000000    -1 
08     0x40800000    0x20008000     0x00000000     0x00000001    -3 
09     0x20008000    0x00000000     0x00000001     0x81000000    -2 
10     0x00000000    0x00000001     0x81000000     0x40010000    -1 
11     0x00000001    0x81000000     0x40010000     0x00000200    -2 
12     0x81000000    0x40010000     0x00000200     0x00000100    -2 
13     0x40010000    0x00000200     0x00000100     0x02000001    -3 
14     0x00000200    0x00000100     0x02000001     0x80020000    -1 
15     0x00000100    0x02000001     0x80020000     0x00000000    -2 
16     0x02000001    0x80020000     0x00000000     0x00000004    -3 
17     0x80020000    0x00000000     0x00000004     0x04000002    -1 
18     0x00000000    0x00000004     0x04000002     0x00040001    -1 
19     0x00000004    0x04000002     0x00040001     0x00000800    -2 
20     0x04000002    0x00040001     0x00000800     0x00000400    -3 
21     0x00040001    0x00000800     0x00000400     0x08000004    -3 
22     0x00000800    0x00000400     0x08000004     0x00080002    -1 
23     0x00000400    0x08000004     0x00080002     0x00000000    -2 
24     0x08000004    0x00080002     0x00000000     0x00000010    -3 
25     0x00080002    0x00000000     0x00000010     0x10000008    -2 
26     0x00000000    0x00000010     0x10000008     0x00100004    -1 
27     0x00000010    0x10000008     0x00100004     0x00002000    -2 
28     0x10000008    0x00100004     0x00002000     0x00001000    -3 
29     0x00100004    0x00002000     0x00001000     0x20000010    -3 
30     0x00002000    0x00001000     0x20000010     0x00200008    -1 
31     0x00001000    0x20000010     0x00200008     0x00000000    -2 
32     0x20000010    0x00200008     0x00000000     0x00000040    -3 
33     0x00200008    0x00000000     0x00000040     0x40000020    -2 
34     0x00000000    0x00000040     0x40000020     0x00400010    -1 
35     0x00000040    0x40000020     0x00400010     0x00008000    -2 
36     0x40000020    0x00400010     0x00008000     0x00004000    -3 
37     0x00400010    0x00008000     0x00004000     0x80000040    -3 
38     0x00008000    0x00004000     0x80000040     0x00800020    -1 
39     0x00004000    0x80000040     0x00800020     0x00000000    -2 
40     0x80000040    0x00800020     0x00000000     0x00000100    -2 
41     0x00800020    0x00000000     0x00000100     0x00000081    -2 
42     0x00000000    0x00000100     0x00000081     0x01000040    -1 
43     0x00000100    0x00000081     0x01000040     0x00020000    -2 
44     0x00000081    0x01000040     0x00020000     0x00010000    -   
------------------ 
43 Round CHAM-128 Total Weight: -85 
Time cost: 55.86 seconds ==  0.93 minutes == 0.02 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 65.46 seconds ==  1.09 minutes == 0.02 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:16:52
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:44 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 85 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 86 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 87 
Time: 30.00 seconds.  
Searching CHAM-128 Bn_w: 88 
++++++++++++++Real weight: 88 +++++++++++
Time: 224.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x08002000    0x00000000     0x40000000     0x20400000    -2 
02     0x00000000    0x40000000     0x20400000     0x10004000    -0 
03     0x40000000    0x20400000     0x10004000     0x00000080    -2 
04     0x20400000    0x10004000     0x00000080     0x00000040    -3 
05     0x10004000    0x00000080     0x00000040     0x40800000    -3 
06     0x00000080    0x00000040     0x40800000     0x20008000    -1 
07     0x00000040    0x40800000     0x20008000     0x00000000    -1 
08     0x40800000    0x20008000     0x00000000     0x00000001    -3 
09     0x20008000    0x00000000     0x00000001     0x81000000    -2 
10     0x00000000    0x00000001     0x81000000     0x40010000    -1 
11     0x00000001    0x81000000     0x40010000     0x00000200    -2 
12     0x81000000    0x40010000     0x00000200     0x00000100    -2 
13     0x40010000    0x00000200     0x00000100     0x02000001    -3 
14     0x00000200    0x00000100     0x02000001     0x80020000    -1 
15     0x00000100    0x02000001     0x80020000     0x00000000    -2 
16     0x02000001    0x80020000     0x00000000     0x00000004    -3 
17     0x80020000    0x00000000     0x00000004     0x04000002    -1 
18     0x00000000    0x00000004     0x04000002     0x00040001    -1 
19     0x00000004    0x04000002     0x00040001     0x00000800    -2 
20     0x04000002    0x00040001     0x00000800     0x00000400    -3 
21     0x00040001    0x00000800     0x00000400     0x08000004    -3 
22     0x00000800    0x00000400     0x08000004     0x00080002    -1 
23     0x00000400    0x08000004     0x00080002     0x00000000    -2 
24     0x08000004    0x00080002     0x00000000     0x00000010    -3 
25     0x00080002    0x00000000     0x00000010     0x10000008    -2 
26     0x00000000    0x00000010     0x10000008     0x00100004    -1 
27     0x00000010    0x10000008     0x00100004     0x00002000    -2 
28     0x10000008    0x00100004     0x00002000     0x00001000    -3 
29     0x00100004    0x00002000     0x00001000     0x20000010    -3 
30     0x00002000    0x00001000     0x20000010     0x00200008    -1 
31     0x00001000    0x20000010     0x00200008     0x00000000    -2 
32     0x20000010    0x00200008     0x00000000     0x00000040    -3 
33     0x00200008    0x00000000     0x00000040     0x40000020    -2 
34     0x00000000    0x00000040     0x40000020     0x00400010    -1 
35     0x00000040    0x40000020     0x00400010     0x00008000    -2 
36     0x40000020    0x00400010     0x00008000     0x00004000    -3 
37     0x00400010    0x00008000     0x00004000     0x80000040    -3 
38     0x00008000    0x00004000     0x80000040     0x00800020    -1 
39     0x00004000    0x80000040     0x00800020     0x00000000    -2 
40     0x80000040    0x00800020     0x00000000     0x00000100    -2 
41     0x00800020    0x00000000     0x00000100     0x00000081    -2 
42     0x00000000    0x00000100     0x00000081     0x01000040    -1 
43     0x00000100    0x00000081     0x01000040     0x00020000    -2 
44     0x00000081    0x01000040     0x00020000     0x00010000    -3 
45     0x01000040    0x00020000     0x00010000     0x00000102    -   
------------------ 
44 Round CHAM-128 Total Weight: -88 
Time cost: 224.31 seconds ==  3.74 minutes == 0.06 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 234.62 seconds ==  3.91 minutes == 0.07 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:23:01
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:45 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 88 
Time: 11.00 seconds.  
Searching CHAM-128 Bn_w: 89 
Time: 103.00 seconds.  
Searching CHAM-128 Bn_w: 90 
++++++++++++++Real weight: 90 +++++++++++
Time: 219.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x40000000    0x00408000     0x00200080     0x00000000    -2 
02     0x00408000    0x00200080     0x00000000     0x01000000    -3 
03     0x00200080    0x00000000     0x01000000     0x00810000    -2 
04     0x00000000    0x01000000     0x00810000     0x00400100    -1 
05     0x01000000    0x00810000     0x00400100     0x00000002    -1 
06     0x00810000    0x00400100     0x00000002     0x00000001    -3 
07     0x00400100    0x00000002     0x00000001     0x01020000    -3 
08     0x00000002    0x00000001     0x01020000     0x00800200    -1 
09     0x00000001    0x01020000     0x00800200     0x00000000    -2 
10     0x01020000    0x00800200     0x00000000     0x04000000    -3 
11     0x00800200    0x00000000     0x04000000     0x02040000    -2 
12     0x00000000    0x04000000     0x02040000     0x01000400    -1 
13     0x04000000    0x02040000     0x01000400     0x00000008    -2 
14     0x02040000    0x01000400     0x00000008     0x00000004    -3 
15     0x01000400    0x00000008     0x00000004     0x04080000    -3 
16     0x00000008    0x00000004     0x04080000     0x02000800    -1 
17     0x00000004    0x04080000     0x02000800     0x00000000    -2 
18     0x04080000    0x02000800     0x00000000     0x10000000    -3 
19     0x02000800    0x00000000     0x10000000     0x08100000    -2 
20     0x00000000    0x10000000     0x08100000     0x04001000    -1 
21     0x10000000    0x08100000     0x04001000     0x00000020    -2 
22     0x08100000    0x04001000     0x00000020     0x00000010    -3 
23     0x04001000    0x00000020     0x00000010     0x10200000    -3 
24     0x00000020    0x00000010     0x10200000     0x08002000    -1 
25     0x00000010    0x10200000     0x08002000     0x00000000    -2 
26     0x10200000    0x08002000     0x00000000     0x40000000    -3 
27     0x08002000    0x00000000     0x40000000     0x20400000    -2 
28     0x00000000    0x40000000     0x20400000     0x10004000    -0 
29     0x40000000    0x20400000     0x10004000     0x00000080    -2 
30     0x20400000    0x10004000     0x00000080     0x00000040    -3 
31     0x10004000    0x00000080     0x00000040     0x40800000    -3 
32     0x00000080    0x00000040     0x40800000     0x20008000    -1 
33     0x00000040    0x40800000     0x20008000     0x00000000    -1 
34     0x40800000    0x20008000     0x00000000     0x00000001    -3 
35     0x20008000    0x00000000     0x00000001     0x81000000    -2 
36     0x00000000    0x00000001     0x81000000     0x40010000    -1 
37     0x00000001    0x81000000     0x40010000     0x00000200    -2 
38     0x81000000    0x40010000     0x00000200     0x00000100    -2 
39     0x40010000    0x00000200     0x00000100     0x02000001    -3 
40     0x00000200    0x00000100     0x02000001     0x80020000    -1 
41     0x00000100    0x02000001     0x80020000     0x00000000    -2 
42     0x02000001    0x80020000     0x00000000     0x00000004    -3 
43     0x80020000    0x00000000     0x00000004     0x04000002    -1 
44     0x00000000    0x00000004     0x04000002     0x00040001    -1 
45     0x00000004    0x04000002     0x00040001     0x00000800    -2 
46     0x04000002    0x00040001     0x00000800     0x00000400    -   
------------------ 
45 Round CHAM-128 Total Weight: -90 
Time cost: 219.86 seconds ==  3.66 minutes == 0.06 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 229.68 seconds ==  3.83 minutes == 0.06 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:27:16
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:46 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 90 
Time: 7.00 seconds.  
Searching CHAM-128 Bn_w: 91 
Time: 50.00 seconds.  
Searching CHAM-128 Bn_w: 92 
++++++++++++++Real weight: 92 +++++++++++
Time: 135.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x08002000    0x00000000     0x40000000     0x20400000    -2 
02     0x00000000    0x40000000     0x20400000     0x10004000    -0 
03     0x40000000    0x20400000     0x10004000     0x00000080    -2 
04     0x20400000    0x10004000     0x00000080     0x00000040    -3 
05     0x10004000    0x00000080     0x00000040     0x40800000    -3 
06     0x00000080    0x00000040     0x40800000     0x20008000    -1 
07     0x00000040    0x40800000     0x20008000     0x00000000    -1 
08     0x40800000    0x20008000     0x00000000     0x00000001    -3 
09     0x20008000    0x00000000     0x00000001     0x81000000    -2 
10     0x00000000    0x00000001     0x81000000     0x40010000    -1 
11     0x00000001    0x81000000     0x40010000     0x00000200    -2 
12     0x81000000    0x40010000     0x00000200     0x00000100    -2 
13     0x40010000    0x00000200     0x00000100     0x02000001    -3 
14     0x00000200    0x00000100     0x02000001     0x80020000    -1 
15     0x00000100    0x02000001     0x80020000     0x00000000    -2 
16     0x02000001    0x80020000     0x00000000     0x00000004    -3 
17     0x80020000    0x00000000     0x00000004     0x04000002    -1 
18     0x00000000    0x00000004     0x04000002     0x00040001    -1 
19     0x00000004    0x04000002     0x00040001     0x00000800    -2 
20     0x04000002    0x00040001     0x00000800     0x00000400    -3 
21     0x00040001    0x00000800     0x00000400     0x08000004    -3 
22     0x00000800    0x00000400     0x08000004     0x00080002    -1 
23     0x00000400    0x08000004     0x00080002     0x00000000    -2 
24     0x08000004    0x00080002     0x00000000     0x00000010    -3 
25     0x00080002    0x00000000     0x00000010     0x10000008    -2 
26     0x00000000    0x00000010     0x10000008     0x00100004    -1 
27     0x00000010    0x10000008     0x00100004     0x00002000    -2 
28     0x10000008    0x00100004     0x00002000     0x00001000    -3 
29     0x00100004    0x00002000     0x00001000     0x20000010    -3 
30     0x00002000    0x00001000     0x20000010     0x00200008    -1 
31     0x00001000    0x20000010     0x00200008     0x00000000    -2 
32     0x20000010    0x00200008     0x00000000     0x00000040    -3 
33     0x00200008    0x00000000     0x00000040     0x40000020    -2 
34     0x00000000    0x00000040     0x40000020     0x00400010    -1 
35     0x00000040    0x40000020     0x00400010     0x00008000    -2 
36     0x40000020    0x00400010     0x00008000     0x00004000    -3 
37     0x00400010    0x00008000     0x00004000     0x80000040    -3 
38     0x00008000    0x00004000     0x80000040     0x00800020    -1 
39     0x00004000    0x80000040     0x00800020     0x00000000    -2 
40     0x80000040    0x00800020     0x00000000     0x00000100    -2 
41     0x00800020    0x00000000     0x00000100     0x00000081    -2 
42     0x00000000    0x00000100     0x00000081     0x01000040    -1 
43     0x00000100    0x00000081     0x01000040     0x00020000    -2 
44     0x00000081    0x01000040     0x00020000     0x00010000    -3 
45     0x01000040    0x00020000     0x00010000     0x00000102    -3 
46     0x00020000    0x00010000     0x00000102     0x02000080    -1 
47     0x00010000    0x00000102     0x02000080     0x00000000    -   
------------------ 
46 Round CHAM-128 Total Weight: -92 
Time cost: 135.39 seconds ==  2.26 minutes == 0.04 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 145.30 seconds ==  2.42 minutes == 0.04 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:31:58
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:47 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 92 
Time: 6.00 seconds.  
Searching CHAM-128 Bn_w: 93 
Time: 66.00 seconds.  
Searching CHAM-128 Bn_w: 94 
++++++++++++++Real weight: 94 +++++++++++
Time: 227.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x08002000    0x00000000     0x40000000     0x20400000    -2 
02     0x00000000    0x40000000     0x20400000     0x10004000    -0 
03     0x40000000    0x20400000     0x10004000     0x00000080    -2 
04     0x20400000    0x10004000     0x00000080     0x00000040    -3 
05     0x10004000    0x00000080     0x00000040     0x40800000    -3 
06     0x00000080    0x00000040     0x40800000     0x20008000    -1 
07     0x00000040    0x40800000     0x20008000     0x00000000    -1 
08     0x40800000    0x20008000     0x00000000     0x00000001    -3 
09     0x20008000    0x00000000     0x00000001     0x81000000    -2 
10     0x00000000    0x00000001     0x81000000     0x40010000    -1 
11     0x00000001    0x81000000     0x40010000     0x00000200    -2 
12     0x81000000    0x40010000     0x00000200     0x00000100    -2 
13     0x40010000    0x00000200     0x00000100     0x02000001    -3 
14     0x00000200    0x00000100     0x02000001     0x80020000    -1 
15     0x00000100    0x02000001     0x80020000     0x00000000    -2 
16     0x02000001    0x80020000     0x00000000     0x00000004    -3 
17     0x80020000    0x00000000     0x00000004     0x04000002    -1 
18     0x00000000    0x00000004     0x04000002     0x00040001    -1 
19     0x00000004    0x04000002     0x00040001     0x00000800    -2 
20     0x04000002    0x00040001     0x00000800     0x00000400    -3 
21     0x00040001    0x00000800     0x00000400     0x08000004    -3 
22     0x00000800    0x00000400     0x08000004     0x00080002    -1 
23     0x00000400    0x08000004     0x00080002     0x00000000    -2 
24     0x08000004    0x00080002     0x00000000     0x00000010    -3 
25     0x00080002    0x00000000     0x00000010     0x10000008    -2 
26     0x00000000    0x00000010     0x10000008     0x00100004    -1 
27     0x00000010    0x10000008     0x00100004     0x00002000    -2 
28     0x10000008    0x00100004     0x00002000     0x00001000    -3 
29     0x00100004    0x00002000     0x00001000     0x20000010    -3 
30     0x00002000    0x00001000     0x20000010     0x00200008    -1 
31     0x00001000    0x20000010     0x00200008     0x00000000    -2 
32     0x20000010    0x00200008     0x00000000     0x00000040    -3 
33     0x00200008    0x00000000     0x00000040     0x40000020    -2 
34     0x00000000    0x00000040     0x40000020     0x00400010    -1 
35     0x00000040    0x40000020     0x00400010     0x00008000    -2 
36     0x40000020    0x00400010     0x00008000     0x00004000    -3 
37     0x00400010    0x00008000     0x00004000     0x80000040    -3 
38     0x00008000    0x00004000     0x80000040     0x00800020    -1 
39     0x00004000    0x80000040     0x00800020     0x00000000    -2 
40     0x80000040    0x00800020     0x00000000     0x00000100    -2 
41     0x00800020    0x00000000     0x00000100     0x00000081    -2 
42     0x00000000    0x00000100     0x00000081     0x01000040    -1 
43     0x00000100    0x00000081     0x01000040     0x00020000    -2 
44     0x00000081    0x01000040     0x00020000     0x00010000    -3 
45     0x01000040    0x00020000     0x00010000     0x00000102    -3 
46     0x00020000    0x00010000     0x00000102     0x02000080    -1 
47     0x00010000    0x00000102     0x02000080     0x00000000    -2 
48     0x00000102    0x02000080     0x00000000     0x00000400    -   
------------------ 
47 Round CHAM-128 Total Weight: -94 
Time cost: 227.11 seconds ==  3.79 minutes == 0.06 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 236.99 seconds ==  3.95 minutes == 0.07 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日14:34:49
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:48 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 94 
Time: 6.00 seconds.  
Searching CHAM-128 Bn_w: 95 
Time: 120.00 seconds.  
Searching CHAM-128 Bn_w: 96 
++++++++++++++Real weight: 96 +++++++++++
Time: 1961.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00100040    0x80000000     0x40000000     0x00408000    -3 
02     0x80000000    0x40000000     0x00408000     0x00200080    -0 
03     0x40000000    0x00408000     0x00200080     0x00000000    -2 
04     0x00408000    0x00200080     0x00000000     0x01000000    -3 
05     0x00200080    0x00000000     0x01000000     0x00810000    -2 
06     0x00000000    0x01000000     0x00810000     0x00400100    -1 
07     0x01000000    0x00810000     0x00400100     0x00000002    -1 
08     0x00810000    0x00400100     0x00000002     0x00000001    -3 
09     0x00400100    0x00000002     0x00000001     0x01020000    -3 
10     0x00000002    0x00000001     0x01020000     0x00800200    -1 
11     0x00000001    0x01020000     0x00800200     0x00000000    -2 
12     0x01020000    0x00800200     0x00000000     0x04000000    -3 
13     0x00800200    0x00000000     0x04000000     0x02040000    -2 
14     0x00000000    0x04000000     0x02040000     0x01000400    -1 
15     0x04000000    0x02040000     0x01000400     0x00000008    -2 
16     0x02040000    0x01000400     0x00000008     0x00000004    -3 
17     0x01000400    0x00000008     0x00000004     0x04080000    -3 
18     0x00000008    0x00000004     0x04080000     0x02000800    -1 
19     0x00000004    0x04080000     0x02000800     0x00000000    -2 
20     0x04080000    0x02000800     0x00000000     0x10000000    -3 
21     0x02000800    0x00000000     0x10000000     0x08100000    -2 
22     0x00000000    0x10000000     0x08100000     0x04001000    -1 
23     0x10000000    0x08100000     0x04001000     0x00000020    -2 
24     0x08100000    0x04001000     0x00000020     0x00000010    -3 
25     0x04001000    0x00000020     0x00000010     0x10200000    -3 
26     0x00000020    0x00000010     0x10200000     0x08002000    -1 
27     0x00000010    0x10200000     0x08002000     0x00000000    -2 
28     0x10200000    0x08002000     0x00000000     0x40000000    -3 
29     0x08002000    0x00000000     0x40000000     0x20400000    -2 
30     0x00000000    0x40000000     0x20400000     0x10004000    -0 
31     0x40000000    0x20400000     0x10004000     0x00000080    -2 
32     0x20400000    0x10004000     0x00000080     0x00000040    -3 
33     0x10004000    0x00000080     0x00000040     0x40800000    -3 
34     0x00000080    0x00000040     0x40800000     0x20008000    -1 
35     0x00000040    0x40800000     0x20008000     0x00000000    -1 
36     0x40800000    0x20008000     0x00000000     0x00000001    -3 
37     0x20008000    0x00000000     0x00000001     0x81000000    -2 
38     0x00000000    0x00000001     0x81000000     0x40010000    -1 
39     0x00000001    0x81000000     0x40010000     0x00000200    -2 
40     0x81000000    0x40010000     0x00000200     0x00000100    -2 
41     0x40010000    0x00000200     0x00000100     0x02000001    -3 
42     0x00000200    0x00000100     0x02000001     0x80020000    -1 
43     0x00000100    0x02000001     0x80020000     0x00000000    -2 
44     0x02000001    0x80020000     0x00000000     0x00000004    -3 
45     0x80020000    0x00000000     0x00000004     0x04000002    -1 
46     0x00000000    0x00000004     0x04000002     0x00040001    -1 
47     0x00000004    0x04000002     0x00040001     0x00000800    -2 
48     0x04000002    0x00040001     0x00000800     0x00000400    -3 
49     0x00040001    0x00000800     0x00000400     0x08000004    -   
------------------ 
48 Round CHAM-128 Total Weight: -96 
Time cost: 1961.85 seconds ==  32.70 minutes == 0.54 hours == 0.02 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 1971.55 seconds ==  32.86 minutes == 0.55 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:07:37
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:49 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 96 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 97 
Time: 41.00 seconds.  
Searching CHAM-128 Bn_w: 98 
Time: 1185.00 seconds.  
Searching CHAM-128 Bn_w: 99 
++++++++++++++Real weight: 99 +++++++++++
Time: 1585.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x01000000    0x00810000     0x00400100     0x00000002    -1 
02     0x00810000    0x00400100     0x00000002     0x00000001    -3 
03     0x00400100    0x00000002     0x00000001     0x01020000    -3 
04     0x00000002    0x00000001     0x01020000     0x00800200    -1 
05     0x00000001    0x01020000     0x00800200     0x00000000    -2 
06     0x01020000    0x00800200     0x00000000     0x04000000    -3 
07     0x00800200    0x00000000     0x04000000     0x02040000    -2 
08     0x00000000    0x04000000     0x02040000     0x01000400    -1 
09     0x04000000    0x02040000     0x01000400     0x00000008    -2 
10     0x02040000    0x01000400     0x00000008     0x00000004    -3 
11     0x01000400    0x00000008     0x00000004     0x04080000    -3 
12     0x00000008    0x00000004     0x04080000     0x02000800    -1 
13     0x00000004    0x04080000     0x02000800     0x00000000    -2 
14     0x04080000    0x02000800     0x00000000     0x10000000    -3 
15     0x02000800    0x00000000     0x10000000     0x08100000    -2 
16     0x00000000    0x10000000     0x08100000     0x04001000    -1 
17     0x10000000    0x08100000     0x04001000     0x00000020    -2 
18     0x08100000    0x04001000     0x00000020     0x00000010    -3 
19     0x04001000    0x00000020     0x00000010     0x10200000    -3 
20     0x00000020    0x00000010     0x10200000     0x08002000    -1 
21     0x00000010    0x10200000     0x08002000     0x00000000    -2 
22     0x10200000    0x08002000     0x00000000     0x40000000    -3 
23     0x08002000    0x00000000     0x40000000     0x20400000    -2 
24     0x00000000    0x40000000     0x20400000     0x10004000    -0 
25     0x40000000    0x20400000     0x10004000     0x00000080    -2 
26     0x20400000    0x10004000     0x00000080     0x00000040    -3 
27     0x10004000    0x00000080     0x00000040     0x40800000    -3 
28     0x00000080    0x00000040     0x40800000     0x20008000    -1 
29     0x00000040    0x40800000     0x20008000     0x00000000    -1 
30     0x40800000    0x20008000     0x00000000     0x00000001    -3 
31     0x20008000    0x00000000     0x00000001     0x81000000    -2 
32     0x00000000    0x00000001     0x81000000     0x40010000    -1 
33     0x00000001    0x81000000     0x40010000     0x00000200    -2 
34     0x81000000    0x40010000     0x00000200     0x00000100    -2 
35     0x40010000    0x00000200     0x00000100     0x02000001    -3 
36     0x00000200    0x00000100     0x02000001     0x80020000    -1 
37     0x00000100    0x02000001     0x80020000     0x00000000    -2 
38     0x02000001    0x80020000     0x00000000     0x00000004    -3 
39     0x80020000    0x00000000     0x00000004     0x04000002    -1 
40     0x00000000    0x00000004     0x04000002     0x00040001    -1 
41     0x00000004    0x04000002     0x00040001     0x00000800    -2 
42     0x04000002    0x00040001     0x00000800     0x00000400    -3 
43     0x00040001    0x00000800     0x00000400     0x08000004    -3 
44     0x00000800    0x00000400     0x08000004     0x00080002    -1 
45     0x00000400    0x08000004     0x00080002     0x00000000    -2 
46     0x08000004    0x00080002     0x00000000     0x00000010    -3 
47     0x00080002    0x00000000     0x00000010     0x10000008    -2 
48     0x00000000    0x00000010     0x10000008     0x00100004    -1 
49     0x00000010    0x10000008     0x00100004     0x00002000    -2 
50     0x10000008    0x00100004     0x00002000     0x00001000    -   
------------------ 
49 Round CHAM-128 Total Weight: -99 
Time cost: 1585.26 seconds ==  26.42 minutes == 0.44 hours == 0.02 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 1595.54 seconds ==  26.59 minutes == 0.44 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:03:49
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:50 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 11.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 99 
Time: 8.00 seconds.  
Searching CHAM-128 Bn_w: 100 
++++++++++++++Real weight: 100 +++++++++++
Time: 91.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x08002000    0x00000000     0x40000000     0x20400000    -2 
02     0x00000000    0x40000000     0x20400000     0x10004000    -0 
03     0x40000000    0x20400000     0x10004000     0x00000080    -2 
04     0x20400000    0x10004000     0x00000080     0x00000040    -3 
05     0x10004000    0x00000080     0x00000040     0x40800000    -3 
06     0x00000080    0x00000040     0x40800000     0x20008000    -1 
07     0x00000040    0x40800000     0x20008000     0x00000000    -1 
08     0x40800000    0x20008000     0x00000000     0x00000001    -3 
09     0x20008000    0x00000000     0x00000001     0x81000000    -2 
10     0x00000000    0x00000001     0x81000000     0x40010000    -1 
11     0x00000001    0x81000000     0x40010000     0x00000200    -2 
12     0x81000000    0x40010000     0x00000200     0x00000100    -2 
13     0x40010000    0x00000200     0x00000100     0x02000001    -3 
14     0x00000200    0x00000100     0x02000001     0x80020000    -1 
15     0x00000100    0x02000001     0x80020000     0x00000000    -2 
16     0x02000001    0x80020000     0x00000000     0x00000004    -3 
17     0x80020000    0x00000000     0x00000004     0x04000002    -1 
18     0x00000000    0x00000004     0x04000002     0x00040001    -1 
19     0x00000004    0x04000002     0x00040001     0x00000800    -2 
20     0x04000002    0x00040001     0x00000800     0x00000400    -3 
21     0x00040001    0x00000800     0x00000400     0x08000004    -3 
22     0x00000800    0x00000400     0x08000004     0x00080002    -1 
23     0x00000400    0x08000004     0x00080002     0x00000000    -2 
24     0x08000004    0x00080002     0x00000000     0x00000010    -3 
25     0x00080002    0x00000000     0x00000010     0x10000008    -2 
26     0x00000000    0x00000010     0x10000008     0x00100004    -1 
27     0x00000010    0x10000008     0x00100004     0x00002000    -2 
28     0x10000008    0x00100004     0x00002000     0x00001000    -3 
29     0x00100004    0x00002000     0x00001000     0x20000010    -3 
30     0x00002000    0x00001000     0x20000010     0x00200008    -1 
31     0x00001000    0x20000010     0x00200008     0x00000000    -2 
32     0x20000010    0x00200008     0x00000000     0x00000040    -3 
33     0x00200008    0x00000000     0x00000040     0x40000020    -2 
34     0x00000000    0x00000040     0x40000020     0x00400010    -1 
35     0x00000040    0x40000020     0x00400010     0x00008000    -2 
36     0x40000020    0x00400010     0x00008000     0x00004000    -3 
37     0x00400010    0x00008000     0x00004000     0x80000040    -3 
38     0x00008000    0x00004000     0x80000040     0x00800020    -1 
39     0x00004000    0x80000040     0x00800020     0x00000000    -2 
40     0x80000040    0x00800020     0x00000000     0x00000100    -2 
41     0x00800020    0x00000000     0x00000100     0x00000081    -2 
42     0x00000000    0x00000100     0x00000081     0x01000040    -1 
43     0x00000100    0x00000081     0x01000040     0x00020000    -2 
44     0x00000081    0x01000040     0x00020000     0x00010000    -3 
45     0x01000040    0x00020000     0x00010000     0x00000102    -3 
46     0x00020000    0x00010000     0x00000102     0x02000080    -1 
47     0x00010000    0x00000102     0x02000080     0x00000000    -2 
48     0x00000102    0x02000080     0x00000000     0x00000400    -3 
49     0x02000080    0x00000000     0x00000400     0x00000204    -2 
50     0x00000000    0x00000400     0x00000204     0x04000100    -1 
51     0x00000400    0x00000204     0x04000100     0x00080000    -   
------------------ 
50 Round CHAM-128 Total Weight: -100 
Time cost: 91.95 seconds ==  1.53 minutes == 0.03 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 103.39 seconds ==  1.72 minutes == 0.03 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:06:18
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:51 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 100 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 101 
Time: 3.00 seconds.  
Searching CHAM-128 Bn_w: 102 
++++++++++++++Real weight: 102 +++++++++++
Time: 22.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x08002000    0x00000000     0x40000000     0x20400000    -2 
02     0x00000000    0x40000000     0x20400000     0x10004000    -0 
03     0x40000000    0x20400000     0x10004000     0x00000080    -2 
04     0x20400000    0x10004000     0x00000080     0x00000040    -3 
05     0x10004000    0x00000080     0x00000040     0x40800000    -3 
06     0x00000080    0x00000040     0x40800000     0x20008000    -1 
07     0x00000040    0x40800000     0x20008000     0x00000000    -1 
08     0x40800000    0x20008000     0x00000000     0x00000001    -3 
09     0x20008000    0x00000000     0x00000001     0x81000000    -2 
10     0x00000000    0x00000001     0x81000000     0x40010000    -1 
11     0x00000001    0x81000000     0x40010000     0x00000200    -2 
12     0x81000000    0x40010000     0x00000200     0x00000100    -2 
13     0x40010000    0x00000200     0x00000100     0x02000001    -3 
14     0x00000200    0x00000100     0x02000001     0x80020000    -1 
15     0x00000100    0x02000001     0x80020000     0x00000000    -2 
16     0x02000001    0x80020000     0x00000000     0x00000004    -3 
17     0x80020000    0x00000000     0x00000004     0x04000002    -1 
18     0x00000000    0x00000004     0x04000002     0x00040001    -1 
19     0x00000004    0x04000002     0x00040001     0x00000800    -2 
20     0x04000002    0x00040001     0x00000800     0x00000400    -3 
21     0x00040001    0x00000800     0x00000400     0x08000004    -3 
22     0x00000800    0x00000400     0x08000004     0x00080002    -1 
23     0x00000400    0x08000004     0x00080002     0x00000000    -2 
24     0x08000004    0x00080002     0x00000000     0x00000010    -3 
25     0x00080002    0x00000000     0x00000010     0x10000008    -2 
26     0x00000000    0x00000010     0x10000008     0x00100004    -1 
27     0x00000010    0x10000008     0x00100004     0x00002000    -2 
28     0x10000008    0x00100004     0x00002000     0x00001000    -3 
29     0x00100004    0x00002000     0x00001000     0x20000010    -3 
30     0x00002000    0x00001000     0x20000010     0x00200008    -1 
31     0x00001000    0x20000010     0x00200008     0x00000000    -2 
32     0x20000010    0x00200008     0x00000000     0x00000040    -3 
33     0x00200008    0x00000000     0x00000040     0x40000020    -2 
34     0x00000000    0x00000040     0x40000020     0x00400010    -1 
35     0x00000040    0x40000020     0x00400010     0x00008000    -2 
36     0x40000020    0x00400010     0x00008000     0x00004000    -3 
37     0x00400010    0x00008000     0x00004000     0x80000040    -3 
38     0x00008000    0x00004000     0x80000040     0x00800020    -1 
39     0x00004000    0x80000040     0x00800020     0x00000000    -2 
40     0x80000040    0x00800020     0x00000000     0x00000100    -2 
41     0x00800020    0x00000000     0x00000100     0x00000081    -2 
42     0x00000000    0x00000100     0x00000081     0x01000040    -1 
43     0x00000100    0x00000081     0x01000040     0x00020000    -2 
44     0x00000081    0x01000040     0x00020000     0x00010000    -3 
45     0x01000040    0x00020000     0x00010000     0x00000102    -3 
46     0x00020000    0x00010000     0x00000102     0x02000080    -1 
47     0x00010000    0x00000102     0x02000080     0x00000000    -2 
48     0x00000102    0x02000080     0x00000000     0x00000400    -3 
49     0x02000080    0x00000000     0x00000400     0x00000204    -2 
50     0x00000000    0x00000400     0x00000204     0x04000100    -1 
51     0x00000400    0x00000204     0x04000100     0x00080000    -2 
52     0x00000204    0x04000100     0x00080000     0x00040000    -   
------------------ 
51 Round CHAM-128 Total Weight: -102 
Time cost: 22.57 seconds ==  0.38 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 32.48 seconds ==  0.54 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:11:44
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:52 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 11.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 102 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 103 
Time: 7.00 seconds.  
Searching CHAM-128 Bn_w: 104 
Time: 203.00 seconds.  
Searching CHAM-128 Bn_w: 105 
++++++++++++++Real weight: 105 +++++++++++
Time: 555.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x40000000    0x00408000     0x00200080     0x00000000    -2 
02     0x00408000    0x00200080     0x00000000     0x01000000    -3 
03     0x00200080    0x00000000     0x01000000     0x00810000    -2 
04     0x00000000    0x01000000     0x00810000     0x00400100    -1 
05     0x01000000    0x00810000     0x00400100     0x00000002    -1 
06     0x00810000    0x00400100     0x00000002     0x00000001    -3 
07     0x00400100    0x00000002     0x00000001     0x01020000    -3 
08     0x00000002    0x00000001     0x01020000     0x00800200    -1 
09     0x00000001    0x01020000     0x00800200     0x00000000    -2 
10     0x01020000    0x00800200     0x00000000     0x04000000    -3 
11     0x00800200    0x00000000     0x04000000     0x02040000    -2 
12     0x00000000    0x04000000     0x02040000     0x01000400    -1 
13     0x04000000    0x02040000     0x01000400     0x00000008    -2 
14     0x02040000    0x01000400     0x00000008     0x00000004    -3 
15     0x01000400    0x00000008     0x00000004     0x04080000    -3 
16     0x00000008    0x00000004     0x04080000     0x02000800    -1 
17     0x00000004    0x04080000     0x02000800     0x00000000    -2 
18     0x04080000    0x02000800     0x00000000     0x10000000    -3 
19     0x02000800    0x00000000     0x10000000     0x08100000    -2 
20     0x00000000    0x10000000     0x08100000     0x04001000    -1 
21     0x10000000    0x08100000     0x04001000     0x00000020    -2 
22     0x08100000    0x04001000     0x00000020     0x00000010    -3 
23     0x04001000    0x00000020     0x00000010     0x10200000    -3 
24     0x00000020    0x00000010     0x10200000     0x08002000    -1 
25     0x00000010    0x10200000     0x08002000     0x00000000    -2 
26     0x10200000    0x08002000     0x00000000     0x40000000    -3 
27     0x08002000    0x00000000     0x40000000     0x20400000    -2 
28     0x00000000    0x40000000     0x20400000     0x10004000    -0 
29     0x40000000    0x20400000     0x10004000     0x00000080    -2 
30     0x20400000    0x10004000     0x00000080     0x00000040    -3 
31     0x10004000    0x00000080     0x00000040     0x40800000    -3 
32     0x00000080    0x00000040     0x40800000     0x20008000    -1 
33     0x00000040    0x40800000     0x20008000     0x00000000    -1 
34     0x40800000    0x20008000     0x00000000     0x00000001    -3 
35     0x20008000    0x00000000     0x00000001     0x81000000    -2 
36     0x00000000    0x00000001     0x81000000     0x40010000    -1 
37     0x00000001    0x81000000     0x40010000     0x00000200    -2 
38     0x81000000    0x40010000     0x00000200     0x00000100    -2 
39     0x40010000    0x00000200     0x00000100     0x02000001    -3 
40     0x00000200    0x00000100     0x02000001     0x80020000    -1 
41     0x00000100    0x02000001     0x80020000     0x00000000    -2 
42     0x02000001    0x80020000     0x00000000     0x00000004    -3 
43     0x80020000    0x00000000     0x00000004     0x04000002    -1 
44     0x00000000    0x00000004     0x04000002     0x00040001    -1 
45     0x00000004    0x04000002     0x00040001     0x00000800    -2 
46     0x04000002    0x00040001     0x00000800     0x00000400    -3 
47     0x00040001    0x00000800     0x00000400     0x08000004    -3 
48     0x00000800    0x00000400     0x08000004     0x00080002    -1 
49     0x00000400    0x08000004     0x00080002     0x00000000    -2 
50     0x08000004    0x00080002     0x00000000     0x00000010    -3 
51     0x00080002    0x00000000     0x00000010     0x10000008    -2 
52     0x00000000    0x00000010     0x10000008     0x00100004    -1 
53     0x00000010    0x10000008     0x00100004     0x00002000    -   
------------------ 
52 Round CHAM-128 Total Weight: -105 
Time cost: 555.65 seconds ==  9.26 minutes == 0.15 hours == 0.01 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 566.90 seconds ==  9.45 minutes == 0.16 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:21:07
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:53 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 105 
Time: 6.00 seconds.  
Searching CHAM-128 Bn_w: 106 
Time: 188.00 seconds.  
Searching CHAM-128 Bn_w: 107 
++++++++++++++Real weight: 107 +++++++++++
Time: 536.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x40000000    0x00408000     0x00200080     0x00000000    -2 
02     0x00408000    0x00200080     0x00000000     0x01000000    -3 
03     0x00200080    0x00000000     0x01000000     0x00810000    -2 
04     0x00000000    0x01000000     0x00810000     0x00400100    -1 
05     0x01000000    0x00810000     0x00400100     0x00000002    -1 
06     0x00810000    0x00400100     0x00000002     0x00000001    -3 
07     0x00400100    0x00000002     0x00000001     0x01020000    -3 
08     0x00000002    0x00000001     0x01020000     0x00800200    -1 
09     0x00000001    0x01020000     0x00800200     0x00000000    -2 
10     0x01020000    0x00800200     0x00000000     0x04000000    -3 
11     0x00800200    0x00000000     0x04000000     0x02040000    -2 
12     0x00000000    0x04000000     0x02040000     0x01000400    -1 
13     0x04000000    0x02040000     0x01000400     0x00000008    -2 
14     0x02040000    0x01000400     0x00000008     0x00000004    -3 
15     0x01000400    0x00000008     0x00000004     0x04080000    -3 
16     0x00000008    0x00000004     0x04080000     0x02000800    -1 
17     0x00000004    0x04080000     0x02000800     0x00000000    -2 
18     0x04080000    0x02000800     0x00000000     0x10000000    -3 
19     0x02000800    0x00000000     0x10000000     0x08100000    -2 
20     0x00000000    0x10000000     0x08100000     0x04001000    -1 
21     0x10000000    0x08100000     0x04001000     0x00000020    -2 
22     0x08100000    0x04001000     0x00000020     0x00000010    -3 
23     0x04001000    0x00000020     0x00000010     0x10200000    -3 
24     0x00000020    0x00000010     0x10200000     0x08002000    -1 
25     0x00000010    0x10200000     0x08002000     0x00000000    -2 
26     0x10200000    0x08002000     0x00000000     0x40000000    -3 
27     0x08002000    0x00000000     0x40000000     0x20400000    -2 
28     0x00000000    0x40000000     0x20400000     0x10004000    -0 
29     0x40000000    0x20400000     0x10004000     0x00000080    -2 
30     0x20400000    0x10004000     0x00000080     0x00000040    -3 
31     0x10004000    0x00000080     0x00000040     0x40800000    -3 
32     0x00000080    0x00000040     0x40800000     0x20008000    -1 
33     0x00000040    0x40800000     0x20008000     0x00000000    -1 
34     0x40800000    0x20008000     0x00000000     0x00000001    -3 
35     0x20008000    0x00000000     0x00000001     0x81000000    -2 
36     0x00000000    0x00000001     0x81000000     0x40010000    -1 
37     0x00000001    0x81000000     0x40010000     0x00000200    -2 
38     0x81000000    0x40010000     0x00000200     0x00000100    -2 
39     0x40010000    0x00000200     0x00000100     0x02000001    -3 
40     0x00000200    0x00000100     0x02000001     0x80020000    -1 
41     0x00000100    0x02000001     0x80020000     0x00000000    -2 
42     0x02000001    0x80020000     0x00000000     0x00000004    -3 
43     0x80020000    0x00000000     0x00000004     0x04000002    -1 
44     0x00000000    0x00000004     0x04000002     0x00040001    -1 
45     0x00000004    0x04000002     0x00040001     0x00000800    -2 
46     0x04000002    0x00040001     0x00000800     0x00000400    -3 
47     0x00040001    0x00000800     0x00000400     0x08000004    -3 
48     0x00000800    0x00000400     0x08000004     0x00080002    -1 
49     0x00000400    0x08000004     0x00080002     0x00000000    -2 
50     0x08000004    0x00080002     0x00000000     0x00000010    -3 
51     0x00080002    0x00000000     0x00000010     0x10000008    -2 
52     0x00000000    0x00000010     0x10000008     0x00100004    -1 
53     0x00000010    0x10000008     0x00100004     0x00002000    -2 
54     0x10000008    0x00100004     0x00002000     0x00001000    -   
------------------ 
53 Round CHAM-128 Total Weight: -107 
Time cost: 536.44 seconds ==  8.94 minutes == 0.15 hours == 0.01 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 546.16 seconds ==  9.10 minutes == 0.15 hours. 
Auto-search END! 
|************************************************************************|



//2019年07月23日15:22:52
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:54 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 107 
Time: 2.00 seconds.  
Searching CHAM-128 Bn_w: 108 
++++++++++++++Real weight: 108 +++++++++++
Time: 24.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00080020    0x00000000     0x00400000     0x00204000    -2 
02     0x00000000    0x00400000     0x00204000     0x00100040    -1 
03     0x00400000    0x00204000     0x00100040     0x80000000    -2 
04     0x00204000    0x00100040     0x80000000     0x40000000    -3 
05     0x00100040    0x80000000     0x40000000     0x00408000    -3 
06     0x80000000    0x40000000     0x00408000     0x00200080    -0 
07     0x40000000    0x00408000     0x00200080     0x00000000    -2 
08     0x00408000    0x00200080     0x00000000     0x01000000    -3 
09     0x00200080    0x00000000     0x01000000     0x00810000    -2 
10     0x00000000    0x01000000     0x00810000     0x00400100    -1 
11     0x01000000    0x00810000     0x00400100     0x00000002    -1 
12     0x00810000    0x00400100     0x00000002     0x00000001    -3 
13     0x00400100    0x00000002     0x00000001     0x01020000    -3 
14     0x00000002    0x00000001     0x01020000     0x00800200    -1 
15     0x00000001    0x01020000     0x00800200     0x00000000    -2 
16     0x01020000    0x00800200     0x00000000     0x04000000    -3 
17     0x00800200    0x00000000     0x04000000     0x02040000    -2 
18     0x00000000    0x04000000     0x02040000     0x01000400    -1 
19     0x04000000    0x02040000     0x01000400     0x00000008    -2 
20     0x02040000    0x01000400     0x00000008     0x00000004    -3 
21     0x01000400    0x00000008     0x00000004     0x04080000    -3 
22     0x00000008    0x00000004     0x04080000     0x02000800    -1 
23     0x00000004    0x04080000     0x02000800     0x00000000    -2 
24     0x04080000    0x02000800     0x00000000     0x10000000    -3 
25     0x02000800    0x00000000     0x10000000     0x08100000    -2 
26     0x00000000    0x10000000     0x08100000     0x04001000    -1 
27     0x10000000    0x08100000     0x04001000     0x00000020    -2 
28     0x08100000    0x04001000     0x00000020     0x00000010    -3 
29     0x04001000    0x00000020     0x00000010     0x10200000    -3 
30     0x00000020    0x00000010     0x10200000     0x08002000    -1 
31     0x00000010    0x10200000     0x08002000     0x00000000    -2 
32     0x10200000    0x08002000     0x00000000     0x40000000    -3 
33     0x08002000    0x00000000     0x40000000     0x20400000    -2 
34     0x00000000    0x40000000     0x20400000     0x10004000    -0 
35     0x40000000    0x20400000     0x10004000     0x00000080    -2 
36     0x20400000    0x10004000     0x00000080     0x00000040    -3 
37     0x10004000    0x00000080     0x00000040     0x40800000    -3 
38     0x00000080    0x00000040     0x40800000     0x20008000    -1 
39     0x00000040    0x40800000     0x20008000     0x00000000    -1 
40     0x40800000    0x20008000     0x00000000     0x00000001    -3 
41     0x20008000    0x00000000     0x00000001     0x81000000    -2 
42     0x00000000    0x00000001     0x81000000     0x40010000    -1 
43     0x00000001    0x81000000     0x40010000     0x00000200    -2 
44     0x81000000    0x40010000     0x00000200     0x00000100    -2 
45     0x40010000    0x00000200     0x00000100     0x02000001    -3 
46     0x00000200    0x00000100     0x02000001     0x80020000    -1 
47     0x00000100    0x02000001     0x80020000     0x00000000    -2 
48     0x02000001    0x80020000     0x00000000     0x00000004    -3 
49     0x80020000    0x00000000     0x00000004     0x04000002    -1 
50     0x00000000    0x00000004     0x04000002     0x00040001    -1 
51     0x00000004    0x04000002     0x00040001     0x00000800    -2 
52     0x04000002    0x00040001     0x00000800     0x00000400    -3 
53     0x00040001    0x00000800     0x00000400     0x08000004    -3 
54     0x00000800    0x00000400     0x08000004     0x00080002    -1 
55     0x00000400    0x08000004     0x00080002     0x00000000    -   
------------------ 
54 Round CHAM-128 Total Weight: -108 
Time cost: 24.45 seconds ==  0.41 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 34.45 seconds ==  0.57 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:26:41
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:55 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 108 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 109 
Time: 2.00 seconds.  
Searching CHAM-128 Bn_w: 110 
++++++++++++++Real weight: 110 +++++++++++
Time: 25.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00080020    0x00000000     0x00400000     0x00204000    -2 
02     0x00000000    0x00400000     0x00204000     0x00100040    -1 
03     0x00400000    0x00204000     0x00100040     0x80000000    -2 
04     0x00204000    0x00100040     0x80000000     0x40000000    -3 
05     0x00100040    0x80000000     0x40000000     0x00408000    -3 
06     0x80000000    0x40000000     0x00408000     0x00200080    -0 
07     0x40000000    0x00408000     0x00200080     0x00000000    -2 
08     0x00408000    0x00200080     0x00000000     0x01000000    -3 
09     0x00200080    0x00000000     0x01000000     0x00810000    -2 
10     0x00000000    0x01000000     0x00810000     0x00400100    -1 
11     0x01000000    0x00810000     0x00400100     0x00000002    -1 
12     0x00810000    0x00400100     0x00000002     0x00000001    -3 
13     0x00400100    0x00000002     0x00000001     0x01020000    -3 
14     0x00000002    0x00000001     0x01020000     0x00800200    -1 
15     0x00000001    0x01020000     0x00800200     0x00000000    -2 
16     0x01020000    0x00800200     0x00000000     0x04000000    -3 
17     0x00800200    0x00000000     0x04000000     0x02040000    -2 
18     0x00000000    0x04000000     0x02040000     0x01000400    -1 
19     0x04000000    0x02040000     0x01000400     0x00000008    -2 
20     0x02040000    0x01000400     0x00000008     0x00000004    -3 
21     0x01000400    0x00000008     0x00000004     0x04080000    -3 
22     0x00000008    0x00000004     0x04080000     0x02000800    -1 
23     0x00000004    0x04080000     0x02000800     0x00000000    -2 
24     0x04080000    0x02000800     0x00000000     0x10000000    -3 
25     0x02000800    0x00000000     0x10000000     0x08100000    -2 
26     0x00000000    0x10000000     0x08100000     0x04001000    -1 
27     0x10000000    0x08100000     0x04001000     0x00000020    -2 
28     0x08100000    0x04001000     0x00000020     0x00000010    -3 
29     0x04001000    0x00000020     0x00000010     0x10200000    -3 
30     0x00000020    0x00000010     0x10200000     0x08002000    -1 
31     0x00000010    0x10200000     0x08002000     0x00000000    -2 
32     0x10200000    0x08002000     0x00000000     0x40000000    -3 
33     0x08002000    0x00000000     0x40000000     0x20400000    -2 
34     0x00000000    0x40000000     0x20400000     0x10004000    -0 
35     0x40000000    0x20400000     0x10004000     0x00000080    -2 
36     0x20400000    0x10004000     0x00000080     0x00000040    -3 
37     0x10004000    0x00000080     0x00000040     0x40800000    -3 
38     0x00000080    0x00000040     0x40800000     0x20008000    -1 
39     0x00000040    0x40800000     0x20008000     0x00000000    -1 
40     0x40800000    0x20008000     0x00000000     0x00000001    -3 
41     0x20008000    0x00000000     0x00000001     0x81000000    -2 
42     0x00000000    0x00000001     0x81000000     0x40010000    -1 
43     0x00000001    0x81000000     0x40010000     0x00000200    -2 
44     0x81000000    0x40010000     0x00000200     0x00000100    -2 
45     0x40010000    0x00000200     0x00000100     0x02000001    -3 
46     0x00000200    0x00000100     0x02000001     0x80020000    -1 
47     0x00000100    0x02000001     0x80020000     0x00000000    -2 
48     0x02000001    0x80020000     0x00000000     0x00000004    -3 
49     0x80020000    0x00000000     0x00000004     0x04000002    -1 
50     0x00000000    0x00000004     0x04000002     0x00040001    -1 
51     0x00000004    0x04000002     0x00040001     0x00000800    -2 
52     0x04000002    0x00040001     0x00000800     0x00000400    -3 
53     0x00040001    0x00000800     0x00000400     0x08000004    -3 
54     0x00000800    0x00000400     0x08000004     0x00080002    -1 
55     0x00000400    0x08000004     0x00080002     0x00000000    -2 
56     0x08000004    0x00080002     0x00000000     0x00000010    -   
------------------ 
55 Round CHAM-128 Total Weight: -110 
Time cost: 25.47 seconds ==  0.42 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 36.42 seconds ==  0.61 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日15:39:11
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:56 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 110 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 111 
Time: 6.00 seconds.  
Searching CHAM-128 Bn_w: 112 
Time: 185.00 seconds.  
Searching CHAM-128 Bn_w: 113 
++++++++++++++Real weight: 113 +++++++++++
Time: 554.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00400000    0x00204000     0x00100040     0x80000000    -2 
02     0x00204000    0x00100040     0x80000000     0x40000000    -3 
03     0x00100040    0x80000000     0x40000000     0x00408000    -3 
04     0x80000000    0x40000000     0x00408000     0x00200080    -0 
05     0x40000000    0x00408000     0x00200080     0x00000000    -2 
06     0x00408000    0x00200080     0x00000000     0x01000000    -3 
07     0x00200080    0x00000000     0x01000000     0x00810000    -2 
08     0x00000000    0x01000000     0x00810000     0x00400100    -1 
09     0x01000000    0x00810000     0x00400100     0x00000002    -1 
10     0x00810000    0x00400100     0x00000002     0x00000001    -3 
11     0x00400100    0x00000002     0x00000001     0x01020000    -3 
12     0x00000002    0x00000001     0x01020000     0x00800200    -1 
13     0x00000001    0x01020000     0x00800200     0x00000000    -2 
14     0x01020000    0x00800200     0x00000000     0x04000000    -3 
15     0x00800200    0x00000000     0x04000000     0x02040000    -2 
16     0x00000000    0x04000000     0x02040000     0x01000400    -1 
17     0x04000000    0x02040000     0x01000400     0x00000008    -2 
18     0x02040000    0x01000400     0x00000008     0x00000004    -3 
19     0x01000400    0x00000008     0x00000004     0x04080000    -3 
20     0x00000008    0x00000004     0x04080000     0x02000800    -1 
21     0x00000004    0x04080000     0x02000800     0x00000000    -2 
22     0x04080000    0x02000800     0x00000000     0x10000000    -3 
23     0x02000800    0x00000000     0x10000000     0x08100000    -2 
24     0x00000000    0x10000000     0x08100000     0x04001000    -1 
25     0x10000000    0x08100000     0x04001000     0x00000020    -2 
26     0x08100000    0x04001000     0x00000020     0x00000010    -3 
27     0x04001000    0x00000020     0x00000010     0x10200000    -3 
28     0x00000020    0x00000010     0x10200000     0x08002000    -1 
29     0x00000010    0x10200000     0x08002000     0x00000000    -2 
30     0x10200000    0x08002000     0x00000000     0x40000000    -3 
31     0x08002000    0x00000000     0x40000000     0x20400000    -2 
32     0x00000000    0x40000000     0x20400000     0x10004000    -0 
33     0x40000000    0x20400000     0x10004000     0x00000080    -2 
34     0x20400000    0x10004000     0x00000080     0x00000040    -3 
35     0x10004000    0x00000080     0x00000040     0x40800000    -3 
36     0x00000080    0x00000040     0x40800000     0x20008000    -1 
37     0x00000040    0x40800000     0x20008000     0x00000000    -1 
38     0x40800000    0x20008000     0x00000000     0x00000001    -3 
39     0x20008000    0x00000000     0x00000001     0x81000000    -2 
40     0x00000000    0x00000001     0x81000000     0x40010000    -1 
41     0x00000001    0x81000000     0x40010000     0x00000200    -2 
42     0x81000000    0x40010000     0x00000200     0x00000100    -2 
43     0x40010000    0x00000200     0x00000100     0x02000001    -3 
44     0x00000200    0x00000100     0x02000001     0x80020000    -1 
45     0x00000100    0x02000001     0x80020000     0x00000000    -2 
46     0x02000001    0x80020000     0x00000000     0x00000004    -3 
47     0x80020000    0x00000000     0x00000004     0x04000002    -1 
48     0x00000000    0x00000004     0x04000002     0x00040001    -1 
49     0x00000004    0x04000002     0x00040001     0x00000800    -2 
50     0x04000002    0x00040001     0x00000800     0x00000400    -3 
51     0x00040001    0x00000800     0x00000400     0x08000004    -3 
52     0x00000800    0x00000400     0x08000004     0x00080002    -1 
53     0x00000400    0x08000004     0x00080002     0x00000000    -2 
54     0x08000004    0x00080002     0x00000000     0x00000010    -3 
55     0x00080002    0x00000000     0x00000010     0x10000008    -2 
56     0x00000000    0x00000010     0x10000008     0x00100004    -1 
57     0x00000010    0x10000008     0x00100004     0x00002000    -   
------------------ 
56 Round CHAM-128 Total Weight: -113 
Time cost: 554.65 seconds ==  9.24 minutes == 0.15 hours == 0.01 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 564.58 seconds ==  9.41 minutes == 0.16 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:43:21
[huangmingjiang@localhost Debug]$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:57 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 21.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 113 
Time: 1.00 seconds.  
Searching CHAM-128 Bn_w: 114 
Time: 77.00 seconds.  
Searching CHAM-128 Bn_w: 115 
++++++++++++++Real weight: 115 +++++++++++
Time: 741.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00400000    0x00204000     0x00100040     0x80000000    -2 
02     0x00204000    0x00100040     0x80000000     0x40000000    -3 
03     0x00100040    0x80000000     0x40000000     0x00408000    -3 
04     0x80000000    0x40000000     0x00408000     0x00200080    -0 
05     0x40000000    0x00408000     0x00200080     0x00000000    -2 
06     0x00408000    0x00200080     0x00000000     0x01000000    -3 
07     0x00200080    0x00000000     0x01000000     0x00810000    -2 
08     0x00000000    0x01000000     0x00810000     0x00400100    -1 
09     0x01000000    0x00810000     0x00400100     0x00000002    -1 
10     0x00810000    0x00400100     0x00000002     0x00000001    -3 
11     0x00400100    0x00000002     0x00000001     0x01020000    -3 
12     0x00000002    0x00000001     0x01020000     0x00800200    -1 
13     0x00000001    0x01020000     0x00800200     0x00000000    -2 
14     0x01020000    0x00800200     0x00000000     0x04000000    -3 
15     0x00800200    0x00000000     0x04000000     0x02040000    -2 
16     0x00000000    0x04000000     0x02040000     0x01000400    -1 
17     0x04000000    0x02040000     0x01000400     0x00000008    -2 
18     0x02040000    0x01000400     0x00000008     0x00000004    -3 
19     0x01000400    0x00000008     0x00000004     0x04080000    -3 
20     0x00000008    0x00000004     0x04080000     0x02000800    -1 
21     0x00000004    0x04080000     0x02000800     0x00000000    -2 
22     0x04080000    0x02000800     0x00000000     0x10000000    -3 
23     0x02000800    0x00000000     0x10000000     0x08100000    -2 
24     0x00000000    0x10000000     0x08100000     0x04001000    -1 
25     0x10000000    0x08100000     0x04001000     0x00000020    -2 
26     0x08100000    0x04001000     0x00000020     0x00000010    -3 
27     0x04001000    0x00000020     0x00000010     0x10200000    -3 
28     0x00000020    0x00000010     0x10200000     0x08002000    -1 
29     0x00000010    0x10200000     0x08002000     0x00000000    -2 
30     0x10200000    0x08002000     0x00000000     0x40000000    -3 
31     0x08002000    0x00000000     0x40000000     0x20400000    -2 
32     0x00000000    0x40000000     0x20400000     0x10004000    -0 
33     0x40000000    0x20400000     0x10004000     0x00000080    -2 
34     0x20400000    0x10004000     0x00000080     0x00000040    -3 
35     0x10004000    0x00000080     0x00000040     0x40800000    -3 
36     0x00000080    0x00000040     0x40800000     0x20008000    -1 
37     0x00000040    0x40800000     0x20008000     0x00000000    -1 
38     0x40800000    0x20008000     0x00000000     0x00000001    -3 
39     0x20008000    0x00000000     0x00000001     0x81000000    -2 
40     0x00000000    0x00000001     0x81000000     0x40010000    -1 
41     0x00000001    0x81000000     0x40010000     0x00000200    -2 
42     0x81000000    0x40010000     0x00000200     0x00000100    -2 
43     0x40010000    0x00000200     0x00000100     0x02000001    -3 
44     0x00000200    0x00000100     0x02000001     0x80020000    -1 
45     0x00000100    0x02000001     0x80020000     0x00000000    -2 
46     0x02000001    0x80020000     0x00000000     0x00000004    -3 
47     0x80020000    0x00000000     0x00000004     0x04000002    -1 
48     0x00000000    0x00000004     0x04000002     0x00040001    -1 
49     0x00000004    0x04000002     0x00040001     0x00000800    -2 
50     0x04000002    0x00040001     0x00000800     0x00000400    -3 
51     0x00040001    0x00000800     0x00000400     0x08000004    -3 
52     0x00000800    0x00000400     0x08000004     0x00080002    -1 
53     0x00000400    0x08000004     0x00080002     0x00000000    -2 
54     0x08000004    0x00080002     0x00000000     0x00000010    -3 
55     0x00080002    0x00000000     0x00000010     0x10000008    -2 
56     0x00000000    0x00000010     0x10000008     0x00100004    -1 
57     0x00000010    0x10000008     0x00100004     0x00002000    -2 
58     0x10000008    0x00100004     0x00002000     0x00001000    -   
------------------ 
57 Round CHAM-128 Total Weight: -115 
Time cost: 741.12 seconds ==  12.35 minutes == 0.21 hours == 0.01 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 762.56 seconds ==  12.71 minutes == 0.21 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日15:45:35
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:58 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 13.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 115 
Time: 1.00 seconds.  
Searching CHAM-128 Bn_w: 116 
++++++++++++++Real weight: 116 +++++++++++
Time: 22.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00080020    0x00000000     0x00400000     0x00204000    -2 
02     0x00000000    0x00400000     0x00204000     0x00100040    -1 
03     0x00400000    0x00204000     0x00100040     0x80000000    -2 
04     0x00204000    0x00100040     0x80000000     0x40000000    -3 
05     0x00100040    0x80000000     0x40000000     0x00408000    -3 
06     0x80000000    0x40000000     0x00408000     0x00200080    -0 
07     0x40000000    0x00408000     0x00200080     0x00000000    -2 
08     0x00408000    0x00200080     0x00000000     0x01000000    -3 
09     0x00200080    0x00000000     0x01000000     0x00810000    -2 
10     0x00000000    0x01000000     0x00810000     0x00400100    -1 
11     0x01000000    0x00810000     0x00400100     0x00000002    -1 
12     0x00810000    0x00400100     0x00000002     0x00000001    -3 
13     0x00400100    0x00000002     0x00000001     0x01020000    -3 
14     0x00000002    0x00000001     0x01020000     0x00800200    -1 
15     0x00000001    0x01020000     0x00800200     0x00000000    -2 
16     0x01020000    0x00800200     0x00000000     0x04000000    -3 
17     0x00800200    0x00000000     0x04000000     0x02040000    -2 
18     0x00000000    0x04000000     0x02040000     0x01000400    -1 
19     0x04000000    0x02040000     0x01000400     0x00000008    -2 
20     0x02040000    0x01000400     0x00000008     0x00000004    -3 
21     0x01000400    0x00000008     0x00000004     0x04080000    -3 
22     0x00000008    0x00000004     0x04080000     0x02000800    -1 
23     0x00000004    0x04080000     0x02000800     0x00000000    -2 
24     0x04080000    0x02000800     0x00000000     0x10000000    -3 
25     0x02000800    0x00000000     0x10000000     0x08100000    -2 
26     0x00000000    0x10000000     0x08100000     0x04001000    -1 
27     0x10000000    0x08100000     0x04001000     0x00000020    -2 
28     0x08100000    0x04001000     0x00000020     0x00000010    -3 
29     0x04001000    0x00000020     0x00000010     0x10200000    -3 
30     0x00000020    0x00000010     0x10200000     0x08002000    -1 
31     0x00000010    0x10200000     0x08002000     0x00000000    -2 
32     0x10200000    0x08002000     0x00000000     0x40000000    -3 
33     0x08002000    0x00000000     0x40000000     0x20400000    -2 
34     0x00000000    0x40000000     0x20400000     0x10004000    -0 
35     0x40000000    0x20400000     0x10004000     0x00000080    -2 
36     0x20400000    0x10004000     0x00000080     0x00000040    -3 
37     0x10004000    0x00000080     0x00000040     0x40800000    -3 
38     0x00000080    0x00000040     0x40800000     0x20008000    -1 
39     0x00000040    0x40800000     0x20008000     0x00000000    -1 
40     0x40800000    0x20008000     0x00000000     0x00000001    -3 
41     0x20008000    0x00000000     0x00000001     0x81000000    -2 
42     0x00000000    0x00000001     0x81000000     0x40010000    -1 
43     0x00000001    0x81000000     0x40010000     0x00000200    -2 
44     0x81000000    0x40010000     0x00000200     0x00000100    -2 
45     0x40010000    0x00000200     0x00000100     0x02000001    -3 
46     0x00000200    0x00000100     0x02000001     0x80020000    -1 
47     0x00000100    0x02000001     0x80020000     0x00000000    -2 
48     0x02000001    0x80020000     0x00000000     0x00000004    -3 
49     0x80020000    0x00000000     0x00000004     0x04000002    -1 
50     0x00000000    0x00000004     0x04000002     0x00040001    -1 
51     0x00000004    0x04000002     0x00040001     0x00000800    -2 
52     0x04000002    0x00040001     0x00000800     0x00000400    -3 
53     0x00040001    0x00000800     0x00000400     0x08000004    -3 
54     0x00000800    0x00000400     0x08000004     0x00080002    -1 
55     0x00000400    0x08000004     0x00080002     0x00000000    -2 
56     0x08000004    0x00080002     0x00000000     0x00000010    -3 
57     0x00080002    0x00000000     0x00000010     0x10000008    -2 
58     0x00000000    0x00000010     0x10000008     0x00100004    -1 
59     0x00000010    0x10000008     0x00100004     0x00002000    -   
------------------ 
58 Round CHAM-128 Total Weight: -116 
Time cost: 22.08 seconds ==  0.37 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 35.37 seconds ==  0.59 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:47:53
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:59 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 13.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 116 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 117 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 118 
++++++++++++++Real weight: 118 +++++++++++
Time: 6.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00080020    0x00000000     0x00400000     0x00204000    -2 
02     0x00000000    0x00400000     0x00204000     0x00100040    -1 
03     0x00400000    0x00204000     0x00100040     0x80000000    -2 
04     0x00204000    0x00100040     0x80000000     0x40000000    -3 
05     0x00100040    0x80000000     0x40000000     0x00408000    -3 
06     0x80000000    0x40000000     0x00408000     0x00200080    -0 
07     0x40000000    0x00408000     0x00200080     0x00000000    -2 
08     0x00408000    0x00200080     0x00000000     0x01000000    -3 
09     0x00200080    0x00000000     0x01000000     0x00810000    -2 
10     0x00000000    0x01000000     0x00810000     0x00400100    -1 
11     0x01000000    0x00810000     0x00400100     0x00000002    -1 
12     0x00810000    0x00400100     0x00000002     0x00000001    -3 
13     0x00400100    0x00000002     0x00000001     0x01020000    -3 
14     0x00000002    0x00000001     0x01020000     0x00800200    -1 
15     0x00000001    0x01020000     0x00800200     0x00000000    -2 
16     0x01020000    0x00800200     0x00000000     0x04000000    -3 
17     0x00800200    0x00000000     0x04000000     0x02040000    -2 
18     0x00000000    0x04000000     0x02040000     0x01000400    -1 
19     0x04000000    0x02040000     0x01000400     0x00000008    -2 
20     0x02040000    0x01000400     0x00000008     0x00000004    -3 
21     0x01000400    0x00000008     0x00000004     0x04080000    -3 
22     0x00000008    0x00000004     0x04080000     0x02000800    -1 
23     0x00000004    0x04080000     0x02000800     0x00000000    -2 
24     0x04080000    0x02000800     0x00000000     0x10000000    -3 
25     0x02000800    0x00000000     0x10000000     0x08100000    -2 
26     0x00000000    0x10000000     0x08100000     0x04001000    -1 
27     0x10000000    0x08100000     0x04001000     0x00000020    -2 
28     0x08100000    0x04001000     0x00000020     0x00000010    -3 
29     0x04001000    0x00000020     0x00000010     0x10200000    -3 
30     0x00000020    0x00000010     0x10200000     0x08002000    -1 
31     0x00000010    0x10200000     0x08002000     0x00000000    -2 
32     0x10200000    0x08002000     0x00000000     0x40000000    -3 
33     0x08002000    0x00000000     0x40000000     0x20400000    -2 
34     0x00000000    0x40000000     0x20400000     0x10004000    -0 
35     0x40000000    0x20400000     0x10004000     0x00000080    -2 
36     0x20400000    0x10004000     0x00000080     0x00000040    -3 
37     0x10004000    0x00000080     0x00000040     0x40800000    -3 
38     0x00000080    0x00000040     0x40800000     0x20008000    -1 
39     0x00000040    0x40800000     0x20008000     0x00000000    -1 
40     0x40800000    0x20008000     0x00000000     0x00000001    -3 
41     0x20008000    0x00000000     0x00000001     0x81000000    -2 
42     0x00000000    0x00000001     0x81000000     0x40010000    -1 
43     0x00000001    0x81000000     0x40010000     0x00000200    -2 
44     0x81000000    0x40010000     0x00000200     0x00000100    -2 
45     0x40010000    0x00000200     0x00000100     0x02000001    -3 
46     0x00000200    0x00000100     0x02000001     0x80020000    -1 
47     0x00000100    0x02000001     0x80020000     0x00000000    -2 
48     0x02000001    0x80020000     0x00000000     0x00000004    -3 
49     0x80020000    0x00000000     0x00000004     0x04000002    -1 
50     0x00000000    0x00000004     0x04000002     0x00040001    -1 
51     0x00000004    0x04000002     0x00040001     0x00000800    -2 
52     0x04000002    0x00040001     0x00000800     0x00000400    -3 
53     0x00040001    0x00000800     0x00000400     0x08000004    -3 
54     0x00000800    0x00000400     0x08000004     0x00080002    -1 
55     0x00000400    0x08000004     0x00080002     0x00000000    -2 
56     0x08000004    0x00080002     0x00000000     0x00000010    -3 
57     0x00080002    0x00000000     0x00000010     0x10000008    -2 
58     0x00000000    0x00000010     0x10000008     0x00100004    -1 
59     0x00000010    0x10000008     0x00100004     0x00002000    -2 
60     0x10000008    0x00100004     0x00002000     0x00001000    -   
------------------ 
59 Round CHAM-128 Total Weight: -118 
Time cost: 6.82 seconds ==  0.11 minutes == 0.00 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 20.31 seconds ==  0.34 minutes == 0.01 hours. 
Auto-search END! 
|************************************************************************|

//2019年07月23日15:51:46
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:60 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 118 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 119 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 120 
Time: 8.00 seconds.  
Searching CHAM-128 Bn_w: 121 
++++++++++++++Real weight: 121 +++++++++++
Time: 76.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x10000000    0x00102000     0x00080020     0x00000000    -2 
02     0x00102000    0x00080020     0x00000000     0x00400000    -3 
03     0x00080020    0x00000000     0x00400000     0x00204000    -2 
04     0x00000000    0x00400000     0x00204000     0x00100040    -1 
05     0x00400000    0x00204000     0x00100040     0x80000000    -2 
06     0x00204000    0x00100040     0x80000000     0x40000000    -3 
07     0x00100040    0x80000000     0x40000000     0x00408000    -3 
08     0x80000000    0x40000000     0x00408000     0x00200080    -0 
09     0x40000000    0x00408000     0x00200080     0x00000000    -2 
10     0x00408000    0x00200080     0x00000000     0x01000000    -3 
11     0x00200080    0x00000000     0x01000000     0x00810000    -2 
12     0x00000000    0x01000000     0x00810000     0x00400100    -1 
13     0x01000000    0x00810000     0x00400100     0x00000002    -1 
14     0x00810000    0x00400100     0x00000002     0x00000001    -3 
15     0x00400100    0x00000002     0x00000001     0x01020000    -3 
16     0x00000002    0x00000001     0x01020000     0x00800200    -1 
17     0x00000001    0x01020000     0x00800200     0x00000000    -2 
18     0x01020000    0x00800200     0x00000000     0x04000000    -3 
19     0x00800200    0x00000000     0x04000000     0x02040000    -2 
20     0x00000000    0x04000000     0x02040000     0x01000400    -1 
21     0x04000000    0x02040000     0x01000400     0x00000008    -2 
22     0x02040000    0x01000400     0x00000008     0x00000004    -3 
23     0x01000400    0x00000008     0x00000004     0x04080000    -3 
24     0x00000008    0x00000004     0x04080000     0x02000800    -1 
25     0x00000004    0x04080000     0x02000800     0x00000000    -2 
26     0x04080000    0x02000800     0x00000000     0x10000000    -3 
27     0x02000800    0x00000000     0x10000000     0x08100000    -2 
28     0x00000000    0x10000000     0x08100000     0x04001000    -1 
29     0x10000000    0x08100000     0x04001000     0x00000020    -2 
30     0x08100000    0x04001000     0x00000020     0x00000010    -3 
31     0x04001000    0x00000020     0x00000010     0x10200000    -3 
32     0x00000020    0x00000010     0x10200000     0x08002000    -1 
33     0x00000010    0x10200000     0x08002000     0x00000000    -2 
34     0x10200000    0x08002000     0x00000000     0x40000000    -3 
35     0x08002000    0x00000000     0x40000000     0x20400000    -2 
36     0x00000000    0x40000000     0x20400000     0x10004000    -0 
37     0x40000000    0x20400000     0x10004000     0x00000080    -2 
38     0x20400000    0x10004000     0x00000080     0x00000040    -3 
39     0x10004000    0x00000080     0x00000040     0x40800000    -3 
40     0x00000080    0x00000040     0x40800000     0x20008000    -1 
41     0x00000040    0x40800000     0x20008000     0x00000000    -1 
42     0x40800000    0x20008000     0x00000000     0x00000001    -3 
43     0x20008000    0x00000000     0x00000001     0x81000000    -2 
44     0x00000000    0x00000001     0x81000000     0x40010000    -1 
45     0x00000001    0x81000000     0x40010000     0x00000200    -2 
46     0x81000000    0x40010000     0x00000200     0x00000100    -2 
47     0x40010000    0x00000200     0x00000100     0x02000001    -3 
48     0x00000200    0x00000100     0x02000001     0x80020000    -1 
49     0x00000100    0x02000001     0x80020000     0x00000000    -2 
50     0x02000001    0x80020000     0x00000000     0x00000004    -3 
51     0x80020000    0x00000000     0x00000004     0x04000002    -1 
52     0x00000000    0x00000004     0x04000002     0x00040001    -1 
53     0x00000004    0x04000002     0x00040001     0x00000800    -2 
54     0x04000002    0x00040001     0x00000800     0x00000400    -3 
55     0x00040001    0x00000800     0x00000400     0x08000004    -3 
56     0x00000800    0x00000400     0x08000004     0x00080002    -1 
57     0x00000400    0x08000004     0x00080002     0x00000000    -2 
58     0x08000004    0x00080002     0x00000000     0x00000010    -3 
59     0x00080002    0x00000000     0x00000010     0x10000008    -2 
60     0x00000000    0x00000010     0x10000008     0x00100004    -1 
61     0x00000010    0x10000008     0x00100004     0x00002000    -   
------------------ 
60 Round CHAM-128 Total Weight: -121 
Time cost: 77.00 seconds ==  1.28 minutes == 0.02 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 87.05 seconds ==  1.45 minutes == 0.02 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:56:03
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:61 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 121 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 122 
Time: 6.00 seconds.  
Searching CHAM-128 Bn_w: 123 
++++++++++++++Real weight: 123 +++++++++++
Time: 70.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x10000000    0x00102000     0x00080020     0x00000000    -2 
02     0x00102000    0x00080020     0x00000000     0x00400000    -3 
03     0x00080020    0x00000000     0x00400000     0x00204000    -2 
04     0x00000000    0x00400000     0x00204000     0x00100040    -1 
05     0x00400000    0x00204000     0x00100040     0x80000000    -2 
06     0x00204000    0x00100040     0x80000000     0x40000000    -3 
07     0x00100040    0x80000000     0x40000000     0x00408000    -3 
08     0x80000000    0x40000000     0x00408000     0x00200080    -0 
09     0x40000000    0x00408000     0x00200080     0x00000000    -2 
10     0x00408000    0x00200080     0x00000000     0x01000000    -3 
11     0x00200080    0x00000000     0x01000000     0x00810000    -2 
12     0x00000000    0x01000000     0x00810000     0x00400100    -1 
13     0x01000000    0x00810000     0x00400100     0x00000002    -1 
14     0x00810000    0x00400100     0x00000002     0x00000001    -3 
15     0x00400100    0x00000002     0x00000001     0x01020000    -3 
16     0x00000002    0x00000001     0x01020000     0x00800200    -1 
17     0x00000001    0x01020000     0x00800200     0x00000000    -2 
18     0x01020000    0x00800200     0x00000000     0x04000000    -3 
19     0x00800200    0x00000000     0x04000000     0x02040000    -2 
20     0x00000000    0x04000000     0x02040000     0x01000400    -1 
21     0x04000000    0x02040000     0x01000400     0x00000008    -2 
22     0x02040000    0x01000400     0x00000008     0x00000004    -3 
23     0x01000400    0x00000008     0x00000004     0x04080000    -3 
24     0x00000008    0x00000004     0x04080000     0x02000800    -1 
25     0x00000004    0x04080000     0x02000800     0x00000000    -2 
26     0x04080000    0x02000800     0x00000000     0x10000000    -3 
27     0x02000800    0x00000000     0x10000000     0x08100000    -2 
28     0x00000000    0x10000000     0x08100000     0x04001000    -1 
29     0x10000000    0x08100000     0x04001000     0x00000020    -2 
30     0x08100000    0x04001000     0x00000020     0x00000010    -3 
31     0x04001000    0x00000020     0x00000010     0x10200000    -3 
32     0x00000020    0x00000010     0x10200000     0x08002000    -1 
33     0x00000010    0x10200000     0x08002000     0x00000000    -2 
34     0x10200000    0x08002000     0x00000000     0x40000000    -3 
35     0x08002000    0x00000000     0x40000000     0x20400000    -2 
36     0x00000000    0x40000000     0x20400000     0x10004000    -0 
37     0x40000000    0x20400000     0x10004000     0x00000080    -2 
38     0x20400000    0x10004000     0x00000080     0x00000040    -3 
39     0x10004000    0x00000080     0x00000040     0x40800000    -3 
40     0x00000080    0x00000040     0x40800000     0x20008000    -1 
41     0x00000040    0x40800000     0x20008000     0x00000000    -1 
42     0x40800000    0x20008000     0x00000000     0x00000001    -3 
43     0x20008000    0x00000000     0x00000001     0x81000000    -2 
44     0x00000000    0x00000001     0x81000000     0x40010000    -1 
45     0x00000001    0x81000000     0x40010000     0x00000200    -2 
46     0x81000000    0x40010000     0x00000200     0x00000100    -2 
47     0x40010000    0x00000200     0x00000100     0x02000001    -3 
48     0x00000200    0x00000100     0x02000001     0x80020000    -1 
49     0x00000100    0x02000001     0x80020000     0x00000000    -2 
50     0x02000001    0x80020000     0x00000000     0x00000004    -3 
51     0x80020000    0x00000000     0x00000004     0x04000002    -1 
52     0x00000000    0x00000004     0x04000002     0x00040001    -1 
53     0x00000004    0x04000002     0x00040001     0x00000800    -2 
54     0x04000002    0x00040001     0x00000800     0x00000400    -3 
55     0x00040001    0x00000800     0x00000400     0x08000004    -3 
56     0x00000800    0x00000400     0x08000004     0x00080002    -1 
57     0x00000400    0x08000004     0x00080002     0x00000000    -2 
58     0x08000004    0x00080002     0x00000000     0x00000010    -3 
59     0x00080002    0x00000000     0x00000010     0x10000008    -2 
60     0x00000000    0x00000010     0x10000008     0x00100004    -1 
61     0x00000010    0x10000008     0x00100004     0x00002000    -2 
62     0x10000008    0x00100004     0x00002000     0x00001000    -   
------------------ 
61 Round CHAM-128 Total Weight: -123 
Time cost: 70.27 seconds ==  1.17 minutes == 0.02 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 79.73 seconds ==  1.33 minutes == 0.02 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日15:59:59
huangmingjiang@ubuntu:~/hmj123/cham64-diff/odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:62 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 9.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 123 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 124 
Time: 6.00 seconds.  
Searching CHAM-128 Bn_w: 125 
++++++++++++++Real weight: 125 +++++++++++
Time: 47.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00080020    0x00000000     0x00400000     0x00204000    -2 
02     0x00000000    0x00400000     0x00204000     0x00100040    -1 
03     0x00400000    0x00204000     0x00100040     0x80000000    -2 
04     0x00204000    0x00100040     0x80000000     0x40000000    -3 
05     0x00100040    0x80000000     0x40000000     0x00408000    -3 
06     0x80000000    0x40000000     0x00408000     0x00200080    -0 
07     0x40000000    0x00408000     0x00200080     0x00000000    -2 
08     0x00408000    0x00200080     0x00000000     0x01000000    -3 
09     0x00200080    0x00000000     0x01000000     0x00810000    -2 
10     0x00000000    0x01000000     0x00810000     0x00400100    -1 
11     0x01000000    0x00810000     0x00400100     0x00000002    -1 
12     0x00810000    0x00400100     0x00000002     0x00000001    -3 
13     0x00400100    0x00000002     0x00000001     0x01020000    -3 
14     0x00000002    0x00000001     0x01020000     0x00800200    -1 
15     0x00000001    0x01020000     0x00800200     0x00000000    -2 
16     0x01020000    0x00800200     0x00000000     0x04000000    -3 
17     0x00800200    0x00000000     0x04000000     0x02040000    -2 
18     0x00000000    0x04000000     0x02040000     0x01000400    -1 
19     0x04000000    0x02040000     0x01000400     0x00000008    -2 
20     0x02040000    0x01000400     0x00000008     0x00000004    -3 
21     0x01000400    0x00000008     0x00000004     0x04080000    -3 
22     0x00000008    0x00000004     0x04080000     0x02000800    -1 
23     0x00000004    0x04080000     0x02000800     0x00000000    -2 
24     0x04080000    0x02000800     0x00000000     0x10000000    -3 
25     0x02000800    0x00000000     0x10000000     0x08100000    -2 
26     0x00000000    0x10000000     0x08100000     0x04001000    -1 
27     0x10000000    0x08100000     0x04001000     0x00000020    -2 
28     0x08100000    0x04001000     0x00000020     0x00000010    -3 
29     0x04001000    0x00000020     0x00000010     0x10200000    -3 
30     0x00000020    0x00000010     0x10200000     0x08002000    -1 
31     0x00000010    0x10200000     0x08002000     0x00000000    -2 
32     0x10200000    0x08002000     0x00000000     0x40000000    -3 
33     0x08002000    0x00000000     0x40000000     0x20400000    -2 
34     0x00000000    0x40000000     0x20400000     0x10004000    -0 
35     0x40000000    0x20400000     0x10004000     0x00000080    -2 
36     0x20400000    0x10004000     0x00000080     0x00000040    -3 
37     0x10004000    0x00000080     0x00000040     0x40800000    -3 
38     0x00000080    0x00000040     0x40800000     0x20008000    -1 
39     0x00000040    0x40800000     0x20008000     0x00000000    -1 
40     0x40800000    0x20008000     0x00000000     0x00000001    -3 
41     0x20008000    0x00000000     0x00000001     0x81000000    -2 
42     0x00000000    0x00000001     0x81000000     0x40010000    -1 
43     0x00000001    0x81000000     0x40010000     0x00000200    -2 
44     0x81000000    0x40010000     0x00000200     0x00000100    -2 
45     0x40010000    0x00000200     0x00000100     0x02000001    -3 
46     0x00000200    0x00000100     0x02000001     0x80020000    -1 
47     0x00000100    0x02000001     0x80020000     0x00000000    -2 
48     0x02000001    0x80020000     0x00000000     0x00000004    -3 
49     0x80020000    0x00000000     0x00000004     0x04000002    -1 
50     0x00000000    0x00000004     0x04000002     0x00040001    -1 
51     0x00000004    0x04000002     0x00040001     0x00000800    -2 
52     0x04000002    0x00040001     0x00000800     0x00000400    -3 
53     0x00040001    0x00000800     0x00000400     0x08000004    -3 
54     0x00000800    0x00000400     0x08000004     0x00080002    -1 
55     0x00000400    0x08000004     0x00080002     0x00000000    -2 
56     0x08000004    0x00080002     0x00000000     0x00000010    -3 
57     0x00080002    0x00000000     0x00000010     0x10000008    -2 
58     0x00000000    0x00000010     0x10000008     0x00100004    -1 
59     0x00000010    0x10000008     0x00100004     0x00002000    -2 
60     0x10000008    0x00100004     0x00002000     0x00001000    -3 
61     0x00100004    0x00002000     0x00001000     0x20000010    -3 
62     0x00002000    0x00001000     0x20000010     0x00200008    -1 
63     0x00001000    0x20000010     0x00200008     0x00000000    -   
------------------ 
62 Round CHAM-128 Total Weight: -125 
Time cost: 47.43 seconds ==  0.79 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 57.33 seconds ==  0.96 minutes == 0.02 hours. 
Auto-search END! 
|************************************************************************|



//2019年07月23日16:07:40
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test-odd/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:63 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 12.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 125 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 126 
Time: 7.00 seconds.  
Searching CHAM-128 Bn_w: 127 
++++++++++++++Real weight: 127 +++++++++++
Time: 50.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x00080020    0x00000000     0x00400000     0x00204000    -2 
02     0x00000000    0x00400000     0x00204000     0x00100040    -1 
03     0x00400000    0x00204000     0x00100040     0x80000000    -2 
04     0x00204000    0x00100040     0x80000000     0x40000000    -3 
05     0x00100040    0x80000000     0x40000000     0x00408000    -3 
06     0x80000000    0x40000000     0x00408000     0x00200080    -0 
07     0x40000000    0x00408000     0x00200080     0x00000000    -2 
08     0x00408000    0x00200080     0x00000000     0x01000000    -3 
09     0x00200080    0x00000000     0x01000000     0x00810000    -2 
10     0x00000000    0x01000000     0x00810000     0x00400100    -1 
11     0x01000000    0x00810000     0x00400100     0x00000002    -1 
12     0x00810000    0x00400100     0x00000002     0x00000001    -3 
13     0x00400100    0x00000002     0x00000001     0x01020000    -3 
14     0x00000002    0x00000001     0x01020000     0x00800200    -1 
15     0x00000001    0x01020000     0x00800200     0x00000000    -2 
16     0x01020000    0x00800200     0x00000000     0x04000000    -3 
17     0x00800200    0x00000000     0x04000000     0x02040000    -2 
18     0x00000000    0x04000000     0x02040000     0x01000400    -1 
19     0x04000000    0x02040000     0x01000400     0x00000008    -2 
20     0x02040000    0x01000400     0x00000008     0x00000004    -3 
21     0x01000400    0x00000008     0x00000004     0x04080000    -3 
22     0x00000008    0x00000004     0x04080000     0x02000800    -1 
23     0x00000004    0x04080000     0x02000800     0x00000000    -2 
24     0x04080000    0x02000800     0x00000000     0x10000000    -3 
25     0x02000800    0x00000000     0x10000000     0x08100000    -2 
26     0x00000000    0x10000000     0x08100000     0x04001000    -1 
27     0x10000000    0x08100000     0x04001000     0x00000020    -2 
28     0x08100000    0x04001000     0x00000020     0x00000010    -3 
29     0x04001000    0x00000020     0x00000010     0x10200000    -3 
30     0x00000020    0x00000010     0x10200000     0x08002000    -1 
31     0x00000010    0x10200000     0x08002000     0x00000000    -2 
32     0x10200000    0x08002000     0x00000000     0x40000000    -3 
33     0x08002000    0x00000000     0x40000000     0x20400000    -2 
34     0x00000000    0x40000000     0x20400000     0x10004000    -0 
35     0x40000000    0x20400000     0x10004000     0x00000080    -2 
36     0x20400000    0x10004000     0x00000080     0x00000040    -3 
37     0x10004000    0x00000080     0x00000040     0x40800000    -3 
38     0x00000080    0x00000040     0x40800000     0x20008000    -1 
39     0x00000040    0x40800000     0x20008000     0x00000000    -1 
40     0x40800000    0x20008000     0x00000000     0x00000001    -3 
41     0x20008000    0x00000000     0x00000001     0x81000000    -2 
42     0x00000000    0x00000001     0x81000000     0x40010000    -1 
43     0x00000001    0x81000000     0x40010000     0x00000200    -2 
44     0x81000000    0x40010000     0x00000200     0x00000100    -2 
45     0x40010000    0x00000200     0x00000100     0x02000001    -3 
46     0x00000200    0x00000100     0x02000001     0x80020000    -1 
47     0x00000100    0x02000001     0x80020000     0x00000000    -2 
48     0x02000001    0x80020000     0x00000000     0x00000004    -3 
49     0x80020000    0x00000000     0x00000004     0x04000002    -1 
50     0x00000000    0x00000004     0x04000002     0x00040001    -1 
51     0x00000004    0x04000002     0x00040001     0x00000800    -2 
52     0x04000002    0x00040001     0x00000800     0x00000400    -3 
53     0x00040001    0x00000800     0x00000400     0x08000004    -3 
54     0x00000800    0x00000400     0x08000004     0x00080002    -1 
55     0x00000400    0x08000004     0x00080002     0x00000000    -2 
56     0x08000004    0x00080002     0x00000000     0x00000010    -3 
57     0x00080002    0x00000000     0x00000010     0x10000008    -2 
58     0x00000000    0x00000010     0x10000008     0x00100004    -1 
59     0x00000010    0x10000008     0x00100004     0x00002000    -2 
60     0x10000008    0x00100004     0x00002000     0x00001000    -3 
61     0x00100004    0x00002000     0x00001000     0x20000010    -3 
62     0x00002000    0x00001000     0x20000010     0x00200008    -1 
63     0x00001000    0x20000010     0x00200008     0x00000000    -2 
64     0x20000010    0x00200008     0x00000000     0x00000040    -   
------------------ 
63 Round CHAM-128 Total Weight: -127 
Time cost: 50.05 seconds ==  0.83 minutes == 0.01 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 62.32 seconds ==  1.04 minutes == 0.02 hours. 
Auto-search END! 
|************************************************************************|


//2019年07月23日16:14:49
huangmingjiang@ubuntu:~/hmj123/cham64-diff/test2/auto_search/Debug$ ./auto_search 
|************************************************************************|
Auto-search Begin... 
Enter the parameters : #ciper #blocksize #rounds  #mode 
ciper:cham 
Note: blocksize Now only fixed for 64 or 128 bits.  
blocksize: 128 
rounds:64 
mode: 0 
----------------Search Optimal Differential Trail-------------------
Constructing CHAM-128 cDDT Tables... 
Time of Construct CHAM-128 cDDT: 10.00 seconds.  
===============Search even-round============= 
Searching CHAM-128 Bn_w: 127 
Time: 0.00 seconds.  
Searching CHAM-128 Bn_w: 128 
Time: 7.00 seconds.  
Searching CHAM-128 Bn_w: 129 
Time: 211.00 seconds.  
Searching CHAM-128 Bn_w: 130 
++++++++++++++Real weight: 130 +++++++++++
Time: 298.00 seconds.  
round----XV0-----------XV1------------XV2------------XV3---------wt 
01     0x01000000    0x00810000     0x00400100     0x00000002    -1 
02     0x00810000    0x00400100     0x00000002     0x00000001    -3 
03     0x00400100    0x00000002     0x00000001     0x01020000    -3 
04     0x00000002    0x00000001     0x01020000     0x00800200    -1 
05     0x00000001    0x01020000     0x00800200     0x00000000    -2 
06     0x01020000    0x00800200     0x00000000     0x04000000    -3 
07     0x00800200    0x00000000     0x04000000     0x02040000    -2 
08     0x00000000    0x04000000     0x02040000     0x01000400    -1 
09     0x04000000    0x02040000     0x01000400     0x00000008    -2 
10     0x02040000    0x01000400     0x00000008     0x00000004    -3 
11     0x01000400    0x00000008     0x00000004     0x04080000    -3 
12     0x00000008    0x00000004     0x04080000     0x02000800    -1 
13     0x00000004    0x04080000     0x02000800     0x00000000    -2 
14     0x04080000    0x02000800     0x00000000     0x10000000    -3 
15     0x02000800    0x00000000     0x10000000     0x08100000    -2 
16     0x00000000    0x10000000     0x08100000     0x04001000    -1 
17     0x10000000    0x08100000     0x04001000     0x00000020    -2 
18     0x08100000    0x04001000     0x00000020     0x00000010    -3 
19     0x04001000    0x00000020     0x00000010     0x10200000    -3 
20     0x00000020    0x00000010     0x10200000     0x08002000    -1 
21     0x00000010    0x10200000     0x08002000     0x00000000    -2 
22     0x10200000    0x08002000     0x00000000     0x40000000    -3 
23     0x08002000    0x00000000     0x40000000     0x20400000    -2 
24     0x00000000    0x40000000     0x20400000     0x10004000    -0 
25     0x40000000    0x20400000     0x10004000     0x00000080    -2 
26     0x20400000    0x10004000     0x00000080     0x00000040    -3 
27     0x10004000    0x00000080     0x00000040     0x40800000    -3 
28     0x00000080    0x00000040     0x40800000     0x20008000    -1 
29     0x00000040    0x40800000     0x20008000     0x00000000    -1 
30     0x40800000    0x20008000     0x00000000     0x00000001    -3 
31     0x20008000    0x00000000     0x00000001     0x81000000    -2 
32     0x00000000    0x00000001     0x81000000     0x40010000    -1 
33     0x00000001    0x81000000     0x40010000     0x00000200    -2 
34     0x81000000    0x40010000     0x00000200     0x00000100    -2 
35     0x40010000    0x00000200     0x00000100     0x02000001    -3 
36     0x00000200    0x00000100     0x02000001     0x80020000    -1 
37     0x00000100    0x02000001     0x80020000     0x00000000    -2 
38     0x02000001    0x80020000     0x00000000     0x00000004    -3 
39     0x80020000    0x00000000     0x00000004     0x04000002    -1 
40     0x00000000    0x00000004     0x04000002     0x00040001    -1 
41     0x00000004    0x04000002     0x00040001     0x00000800    -2 
42     0x04000002    0x00040001     0x00000800     0x00000400    -3 
43     0x00040001    0x00000800     0x00000400     0x08000004    -3 
44     0x00000800    0x00000400     0x08000004     0x00080002    -1 
45     0x00000400    0x08000004     0x00080002     0x00000000    -2 
46     0x08000004    0x00080002     0x00000000     0x00000010    -3 
47     0x00080002    0x00000000     0x00000010     0x10000008    -2 
48     0x00000000    0x00000010     0x10000008     0x00100004    -1 
49     0x00000010    0x10000008     0x00100004     0x00002000    -2 
50     0x10000008    0x00100004     0x00002000     0x00001000    -3 
51     0x00100004    0x00002000     0x00001000     0x20000010    -3 
52     0x00002000    0x00001000     0x20000010     0x00200008    -1 
53     0x00001000    0x20000010     0x00200008     0x00000000    -2 
54     0x20000010    0x00200008     0x00000000     0x00000040    -3 
55     0x00200008    0x00000000     0x00000040     0x40000020    -2 
56     0x00000000    0x00000040     0x40000020     0x00400010    -1 
57     0x00000040    0x40000020     0x00400010     0x00008000    -2 
58     0x40000020    0x00400010     0x00008000     0x00004000    -3 
59     0x00400010    0x00008000     0x00004000     0x80000040    -3 
60     0x00008000    0x00004000     0x80000040     0x00800020    -1 
61     0x00004000    0x80000040     0x00800020     0x00000000    -2 
62     0x80000040    0x00800020     0x00000000     0x00000100    -2 
63     0x00800020    0x00000000     0x00000100     0x00000081    -2 
64     0x00000000    0x00000100     0x00000081     0x01000040    -1 
65     0x00000100    0x00000081     0x01000040     0x00020000    -   
------------------ 
64 Round CHAM-128 Total Weight: -130 
Time cost: 298.08 seconds ==  4.97 minutes == 0.08 hours == 0.00 days. 
Auto-search CHAM-128 optimal differential trails END! 
|************************************************************************|
Time cost: 308.14 seconds ==  5.14 minutes == 0.09 hours. 
Auto-search END! 
|************************************************************************|



